[
  {
    "objectID": "writings.html",
    "href": "writings.html",
    "title": "john myers, ph.d.",
    "section": "",
    "text": "The posts below (as they are written) will range from technical deep-dives in machine learning and pure mathematics, to practical applications in finance and risk, and anything else that catches my interests. Some posts will draw from my expertise as a mathematician, while others will reflect my journey as a beginner exploring and learning new fields.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGaussian mixture models I: a first look\n\n\n\nMixture models\n\nGaussian mixture models\n\nProbabilistic graphical models\n\nMachine learning\n\nProbability theory\n\nPython\n\n\n\n\n\n\n\n\n\nSep 26, 2025\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "teaching/analysis-fa-25.html",
    "href": "teaching/analysis-fa-25.html",
    "title": "mat347 analysis, fall 2025",
    "section": "",
    "text": "instructor:\n\n\njohn myers\n\n\n\n\noffice:\n\n\nmarano 175\n\n\n\n\noffice hours:\n\n\n12-12:30 MWF\n\n\n\n\nsyllabus:\n\n\nlink\n\n\n\n\n\n\n\n\n\n\n\n\nweek\ndate\ntopics\ninfo + due dates\n\n\n\n\n7\n10.10 fri\nno class - fall break\n\n\n\n\n10.08 wed\n\n\n\n\n\n10.06 mon\n2.3 the algebraic and order limit theorems, part 2    2.4-2.5 Monotone Conv. and B-W theorems, part 1   \n\n\n\n6\n10.03 fri\nclass cancelled\nweek 6 hw due\n\n\n\n10.01 wed\n2.3 the algebraic and order limit theorems, part 1     2.3 the algebraic and order limit theorems, part 2   \n\n\n\n\n09.29 mon\n2.3 the algebraic and order limit theorems, part 1   \n\n\n\n5\n09.26 fri\n2.2 the limit of a sequence, part 2   \nweek 5 hw due\n\n\n\n09.24 wed\n2.2 the limit of a sequence, part 1   \n\n\n\n\n09.22 mon\n1.5 cardinality, part 2   2.2 the limit of a sequence, part 1   \n\n\n\n4\n09.19 fri\n1.5 cardinality, part 2   \nweek 4 hw due\n\n\n\n09.17 wed\n1.5 cardinality, part 1   \n\n\n\n\n09.15 mon\n1.5 cardinality, part 1   \n\n\n\n3\n09.12 fri\n1.4 consequences of completeness   \nweek 2 & 3 homework due\n\n\n\n09.10 wed\n1.4 consequences of completeness   \n\n\n\n\n09.08 mon\n1.3 axiom of completeness   \n\n\n\n2\n09.05 fri\n1.2 some preliminaries1.3 axiom of completeness   \n\n\n\n\n09.03 wed\n1.2 some preliminaries   \n\n\n\n1\n08.29 fri\nno class\n\n\n\n\n08.27 wed\n1.1 introduction   1.2 some preliminaries   \n\n\n\n\n08.25 mon\n1.1 introduction"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "john myers, ph.d.",
    "section": "",
    "text": "I’m a Ph.D. mathematician and university professor with a background that spans both theoretical and applied mathematics. My undergraduate education was in applied and computational mathematics with a minor in physics. In graduate school and through the first few years of my research career, I specialized in homological algebra and commutative ring theory, focusing on the bridge between modern algebra and geometry and topology. However, my interests have gradually shifted toward more practical domains, where I now work with machine learning, AI, statistics, and probability, with particular interest in applications to finance and risk. You can find my early mathematical research on my arXiv page.\n\n\n\n\n\nIn addition to my role as a mathematician, I am also an educator who has taught 13 distinct college mathematics courses ranging from introductory calculus, to applied engineering mathematics, to upper-division theoretical courses, and have been recognized with teaching awards for my classroom work. Notable among these was a novel course in my dissertation research areas of commutative ring theory and algebraic geometry—topics not often taught at the undergraduate level—and a year-long course in probabilistic machine learning for which I wrote the textbook and developed the supporting infrastructure, all available in the navigation bar at the top.\n\n\n\n\n\nMathematics has a unique duality: it’s both deeply theoretical and remarkably practical. The abstract concepts that fascinate pure mathematicians frequently evolve into the foundations of the algorithms and technological systems that shape our daily lives. This website will explore that arc from theory to application, sharing writings on mathematics, probability, machine learning, and their real-world intersections. Writing helps me clarify my own understanding as I continue learning across these fields. Whether you’re a student, researcher, or practitioner, I hope you’ll find ideas and resources here that inform and inspire."
  },
  {
    "objectID": "posts/gmm-1/index.html",
    "href": "posts/gmm-1/index.html",
    "title": "Gaussian mixture models: a first look",
    "section": "",
    "text": "A mixture of gaussians represents one of the most elegant and practically useful concepts in probability theory and machine learning. At its core, this is a probabilistic model that assumes observed data arises from a combination of several underlying normal distributions, each contributing to the overall distribution with different weights and parameters. Rather than forcing all data points to conform to a single bell curve, a gaussian mixture allows for multiple clusters, each governed by its own mean, variance, and relative importance in the mixture. This creates a framework for modeling complex, multi-modal distributions that frequently appear in real-world scenarios. Consider, for example, the heights of adults in a population that includes both men and women, or the distribution of pixel intensities in an image containing multiple distinct objects. A single gaussian would poorly capture the true underlying structure, while a mixture model can naturally accommodate the multiple peaks and varying spreads that characterize such data. The beauty of this approach lies not only in its flexibility but also in its mathematical tractability, making it both theoretically sound and computationally feasible for a wide range of applications.\nFor example, suppose we were presented with the following data distribution, displayed here as a histogram:\n\n\n\n\n\n\n\n\n\nThree clusters are immediately evident: the first with a peak around \\(x=10\\), the second around \\(x=15\\), and the third near \\(x=21\\). The presence of three clusters with well-defined peaks suggests that the data might be modeled well by a mixture of three gaussians.\nIndeed, this synthetic dataset contains 1,000 observations sampled from a three-component mixture of gaussians, also called a gaussian mixture model or GMM. In this introductory post, I’ll explain the mathematical and graphical structure of the GMM that generated this data. Since I fixed the GMM parameters before sampling, we know the true underlying model. In a follow-up post, I’ll tackle the inverse problem: given only the dataset, how can we estimate the parameters and recover the original GMM?"
  },
  {
    "objectID": "posts/gmm-1/index.html#introduction",
    "href": "posts/gmm-1/index.html#introduction",
    "title": "Gaussian mixture models: a first look",
    "section": "",
    "text": "A mixture of gaussians represents one of the most elegant and practically useful concepts in probability theory and machine learning. At its core, this is a probabilistic model that assumes observed data arises from a combination of several underlying normal distributions, each contributing to the overall distribution with different weights and parameters. Rather than forcing all data points to conform to a single bell curve, a gaussian mixture allows for multiple clusters, each governed by its own mean, variance, and relative importance in the mixture. This creates a framework for modeling complex, multi-modal distributions that frequently appear in real-world scenarios. Consider, for example, the heights of adults in a population that includes both men and women, or the distribution of pixel intensities in an image containing multiple distinct objects. A single gaussian would poorly capture the true underlying structure, while a mixture model can naturally accommodate the multiple peaks and varying spreads that characterize such data. The beauty of this approach lies not only in its flexibility but also in its mathematical tractability, making it both theoretically sound and computationally feasible for a wide range of applications.\nFor example, suppose we were presented with the following data distribution, displayed here as a histogram:\n\n\n\n\n\n\n\n\n\nThree clusters are immediately evident: the first with a peak around \\(x=10\\), the second around \\(x=15\\), and the third near \\(x=21\\). The presence of three clusters with well-defined peaks suggests that the data might be modeled well by a mixture of three gaussians.\nIndeed, this synthetic dataset contains 1,000 observations sampled from a three-component mixture of gaussians, also called a gaussian mixture model or GMM. In this introductory post, I’ll explain the mathematical and graphical structure of the GMM that generated this data. Since I fixed the GMM parameters before sampling, we know the true underlying model. In a follow-up post, I’ll tackle the inverse problem: given only the dataset, how can we estimate the parameters and recover the original GMM?"
  },
  {
    "objectID": "posts/gmm-1/index.html#conditional-pdfs-and-graphical-structures",
    "href": "posts/gmm-1/index.html#conditional-pdfs-and-graphical-structures",
    "title": "Gaussian mixture models: a first look",
    "section": "Conditional PDFs and graphical structures",
    "text": "Conditional PDFs and graphical structures\nAs mentioned above, a GMM combines several individual gaussians, each called a component of the mixture. Generating a sample \\(x\\) from a GMM involves two steps:\n\nSelect a component from which to generate \\(x\\).\nSample \\(x\\) from the chosen component gaussian.\n\nThe key insight is that components need not be selected with equal probability. Each component has an associated weight that determines its selection probability in step 1.\nTo formalize the selection process, we introduce the categorical distribution. Suppose given non-negative real numbers \\(\\phi_1,\\phi_2,\\ldots,\\phi_m\\) that sum to \\(1\\):\n\\[\n\\phi_1 + \\phi_2 + \\cdots + \\phi_m =1.\n\\]\nWe say that a discrete random variable \\(Y\\) has a categorical distribution, written\n\\[\nY \\sim \\mathcal{C}at(\\phi_1,\\phi_2,\\ldots,\\phi_m),\n\\tag{1}\\]\nif its probability mass function has the form\n\\[\np(y) = \\begin{cases}\n\\phi_y & : y=1,2,\\ldots,m, \\\\\n0 & : \\text{otherwise}.\n\\end{cases}\n\\]\nWe can now describe GMM sampling more precisely. For a GMM with \\(m\\) components where the \\(i\\)-th component has weight \\(\\phi_i\\), and \\(Y\\) a categorical random variable as in Equation 1, the sampling scheme above becomes:\n\nSample \\(y\\) from the categorical distribution \\(Y\\).\nGiven \\(y\\), sample \\(x\\) from the \\(y\\)-th component gaussian.\n\nThis natural progression from component selection to data generation is often called forward sampling, for obvious reasons.\nWe can visualize this sampling process with a simple graphical representation:\n\n\n\n\n\nHere, \\(Y\\) represents the categorical random variable that encodes component weights, while \\(X\\) represents the random variable from which we sample our observation \\(x\\). The arrow captures the “forward” direction of the sampling process: first select a component, then generate data from it. This diagram illustrates the GMM as a simple example of a probabilistic graphical model (or PGM)—a topic I’ll explore in depth in future posts.\nThe mathematical relationship between these variables is straightforward. Given that component \\(y\\) has been selected, the conditional distribution of \\(X\\) is gaussian:\n\\[\n(X \\mid Y=y) \\sim \\mathcal{N}(\\mu_y,\\sigma_y^2).\n\\]\nThis conditional distribution corresponds exactly to the \\(y\\)-th component of our GMM. Notice that both the mean \\(\\mu_y\\)​ and standard deviation \\(\\sigma_y\\) are component-specific, allowing each gaussian in the mixture to have its own location and spread.\nA GMM thus has two different types of parameters:\n\nThe component weights \\(\\phi_1,\\phi_2,\\ldots,\\phi_m\\).\nFor each \\(y=1,2,\\ldots,m\\), the guassian parameters \\(\\mu_y\\) and \\(\\sigma_y\\).\n\nAs I mentioned in the introduction, in this post we assume that these parameters are fixed and known. Later, we will learn how to estimate them from data."
  },
  {
    "objectID": "posts/gmm-1/index.html#marginal-pdfs",
    "href": "posts/gmm-1/index.html#marginal-pdfs",
    "title": "Gaussian mixture models: a first look",
    "section": "Marginal PDFs",
    "text": "Marginal PDFs\nThe marginal distribution of \\(X\\) follows directly from the law of total probability: \\[\nf(x) = \\sum_{y=1}^m p(y)f(x|y)  = \\sum_{y=1}^m \\phi_y f(x|y),\n\\tag{2}\\]\nwhere the conditional densities are normal:\n\\[\nf(x|y) = \\frac{1}{\\sigma_y\\sqrt{2\\pi}} \\exp \\left[ - \\frac{1}{2} \\left( \\frac{x-\\mu_y}{\\sigma_y}\\right)^2\\right].\n\\]\nThus, the marginal density \\(f(x)\\) is a convex linear combination of normal densities.\nNow let’s examine the specific \\(3\\)-component GMM that generated our dataset. The component parameters are:\n\\[\n(\\mu_1,\\sigma_1) = (10, 1), \\quad (\\mu_2,\\sigma_2) = (15, 2), \\quad (\\mu_3,\\sigma_3) = (21, 0.5),\n\\]\nwith weights:\n\\[\n(\\phi_1,\\phi_2,\\phi_3) = (0.2, 0.7, 0.1).\n\\]\nNotice that the middle component (centered at 15) dominates with 70% weight, while the outer components contribute 20% and 10% respectively.\nLet’s implement and visualize the component gaussians and the marginal PDF in Python. First, let’s load the parameters:\n\nnorm_params = [\n  {\"loc\": 10, \"scale\": 1},\n  {\"loc\": 15, \"scale\": 2},\n  {\"loc\": 21, \"scale\": 0.5}\n]\nweights = [0.2, 0.7, 0.1]\n\nNow, we plot the individual components, each scaled by its weight:\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\nmesh = np.linspace(7, 23, num=200)\n\nfor y, (param, weight) in enumerate(zip(norm_params, weights)):\n  X = norm(**param)\n  plt.plot(mesh, weight * X.pdf(mesh), color=colors[y], label=f\"component {y+1}\")\n\nplt.xlabel(\"x\")\nplt.ylabel(\"density\")\nplt.title(\"gaussian components\")\nplt.legend()\nfig = plt.gcf()  # Get current figure\nfig.set_size_inches(6, 4)\nplt.tight_layout()\nplt.show()\nplt.close()\n\n\n\n\n\n\n\n\nThe marginal PDF implementation follows Equation 2 directly:\n\ndef marginal_pdf(x):  \n  return sum([weight * norm(**param).pdf(x) for weight, param in zip(weights, norm_params)])\n\nFinally, we plot the theoretical marginal PDF against the empirical histogram:\n\nimport seaborn as sns\n\ndata = np.load(\"../../data/gmm-data.npy\")\n\nsns.histplot(data=data, color=yellow, alpha=0.25, ec=grey, zorder=2, stat=\"density\", label=\"data\")\nplt.plot(mesh, marginal_pdf(mesh), color=blue, label=\"marginal PDF\")\nplt.xlabel(\"x\")\nplt.ylabel(\"density\")\nplt.legend()\nfig = plt.gcf()  # Get current figure\nfig.set_size_inches(6, 4)\nplt.tight_layout()\nplt.show()\nplt.close()\n\n\n\n\n\n\n\n\nThe close agreement between our theoretical marginal PDF and the empirical histogram confirms that our synthetic dataset faithfully represents the underlying GMM. Notice how the theoretical curve captures all three modes: the subtle left peak around \\(x=10\\), the dominant central peak near \\(x=15\\), and the sharp right peak at \\(x=21\\). The varying heights and widths of these peaks directly reflect the component weights and standard deviations we specified."
  },
  {
    "objectID": "posts/gmm-1/index.html#sampling",
    "href": "posts/gmm-1/index.html#sampling",
    "title": "Gaussian mixture models: a first look",
    "section": "Sampling",
    "text": "Sampling\nHaving established the theoretical foundation and visualized the marginal PDF, let’s now examine the process behind generating our synthetic dataset.\nBut this is easy. We first sample 1,000 values of \\(y\\) from the categorical random variable\n\\[\nY \\sim \\mathcal{C}at(0.2, 0.7, 0.1),\n\\]\nand then for each \\(y\\) we sample from the gaussian \\(X|Y=y\\). We check that our new generated sample coincides with the original dataset:\n\nnp.random.seed(42) # Needed to replicate the original dataset\n\nn_samples = 1000\ny_samples = np.random.choice([0, 1, 2], size=n_samples, p=weights)\nx_samples = np.array([norm(**norm_params[y]).rvs() for y in y_samples])\n\nprint(\"Are the datasets equal? \" + (\"Yes.\" if np.array_equal(data, x_samples) else \"No.\"))\n\nAre the datasets equal? Yes."
  },
  {
    "objectID": "posts/gmm-1/index.html#conclusion",
    "href": "posts/gmm-1/index.html#conclusion",
    "title": "Gaussian mixture models: a first look",
    "section": "Conclusion",
    "text": "Conclusion\nIn this post we’ve built the GMM from the ground up, starting with its definition, exploring its conditional and marginal structure, and even sampling from it directly. But in practice, the real challenge is the inverse problem we mentioned earlier: we are usually given a dataset and want to fit a GMM by estimating its parameters. How do we tease apart the hidden components, estimate their weights, and recover the underlying mixture? That puzzle leads directly to one of the most beautiful iterative methods in statistics and machine learning: the expectation–maximization algorithm, which will be the focus of the next post in this series."
  },
  {
    "objectID": "teaching/calculus-ii-fa-25.html",
    "href": "teaching/calculus-ii-fa-25.html",
    "title": "mat220 calculus II, fall 2025",
    "section": "",
    "text": "instructor:\n\n\njohn myers\n\n\n\n\noffice + office hours:\n\n\nmarano 175, 12-12:30 MWF\n\n\n\n\nhomework:\n\n\nlink\n\n\n\n\nsyllabus:\n\n\nlink\n\n\n\n\n\n\n\n\n\n\n\n\nweek\ndate\ntopics\ninfo + due dates\n\n\n\n\n8\n10.17 fri\n\n\n\n\n\n10.16 thu\nexam 1 on sections 5.1-7.4\nsection 7.4 hw due @ 9:30am\n\n\n\n10.15 wed\n\n\n\n\n\n10.13 mon\n\n\n\n\n7\n10.10 fri\nno class - fall break\n\n\n\n\n10.09 thu\nno class - fall break\n\n\n\n\n10.08 wed\n7.4 partial fractions, part 1  \nsection 7.3, part 2, hw due @ 12:30pm\n\n\n\n10.06 mon\nsec 800: class cancelled  sec 810: 7.3 trigonometric substitution, part 2  \nsection 7.3, part 1, hw due @ 12:30pm\n\n\n6\n10.03 fri\nsec 800: 7.3 trigonometric substitution, part 2    sec 810: class cancelled\nquiz 6 on section 7.1\n\n\n\n10.04 thu\n7.3 trigonometric substitution, part 1    7.3 trigonometric substitution, part 2  \n\n\n\n\n10.01 wed\n7.3 trigonometric substitution, part 1  \nsection 7.1 hw due @ 12:30pm\n\n\n\n09.29 mon\n7.1 integration by parts  \n\n\n\n5\n09.26 fri\n7.1 integration by parts  \nquiz 5 on sections 5.4 and 5.5\n\n\n\n09.25 thu\ngroup exploration 5\n\n\n\n\n09.24 wed\n7.1 integration by parts  \nsection 5.5 hw due @ 12:30pm\n\n\n\n09.22 mon\n5.5 average value of a function  \nsection 5.4 hw due @ 12:30pm\n\n\n4\n09.19 fri\n5.4 work  \nsection 5.3 hw due @ 12:30pmquiz 4 on section 5.3\n\n\n\n09.18 thu\ngroup exploration 4\n\n\n\n\n09.17 wed\n5.4 work  \n\n\n\n\n09.15 mon\n5.3 volumes by cylindrical shells  \nsection 5.2 hw due @ 12:30pm\n\n\n3\n09.12 fri\n5.2 volumes, part 2  \nquiz 3 on section 5.1\n\n\n\n09.11 thu\ngroup exploration 3\n\n\n\n\n09.10 wed\n5.2 volumes, part 1  5.2 volumes, part 2  \n\n\n\n\n09.08 mon\n5.2 volumes, part 1  \nsection 5.1 hw due @ 12:30pm\n\n\n2\n09.05 fri\n5.1 areas between curves  \n\n\n\n\n09.04 thu\ngroup exploration 2\ncalculus I review homework due @ 9:30am\n\n\n\n09.03 wed\ncalculus I review, part 2  \n\n\n\n1\n08.29 fri\nno class\n\n\n\n\n08.28 thu\nno class\n\n\n\n\n08.27 wed\ncalculus I review, part 1  \n\n\n\n\n08.25 mon\ncalculus I review, part 1"
  },
  {
    "objectID": "scripts/lin-reg-1.html",
    "href": "scripts/lin-reg-1.html",
    "title": "john myers, ph.d.",
    "section": "",
    "text": "from scipy.stats import norm, multivariate_normal, entropy\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\nnp.random.seed(42)\nplt.style.use(\"../aux-files/custom-theme.mplstyle\")\nyellow = \"#FFC300\"\nblue = \"#3399FF\"\npink = \"#FF3399\"\ngrey = \"#121212\"\nwhite = \"#E5E5E5\"\ncolors = [yellow, blue, pink]\n\ncmap_colors = [grey, yellow]\ncustom_cmap = LinearSegmentedColormap.from_list(\"my_cmap\", cmap_colors)\n\n\nn = 6\njoint = np.random.rand(n ** 2)\njoint = joint / joint.sum()\njoint = joint.reshape(n, n)\n\nax = sns.heatmap(joint.T, annot=True, fmt=\".3f\", cmap=custom_cmap, linewidth=8, linecolor=grey)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n\nax.invert_yaxis()\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, axes = plt.subplots(nrows=2, ncols=3, sharey=True, sharex=True)\naxes = axes.flatten()\nconditionals = []\n\nfor x, ax in enumerate(axes):\n  conditional = joint[x, :] / joint[x, :].sum()\n  conditionals.append(conditional)\n  ax.bar(range(n), conditional, width=0.4, zorder=2)\n  ax.set_xticks(range(n))  \n  ax.set_xticklabels(range(n))\n  ax.set_title(rf\"$x={x}$\")\n  \nfig.supxlabel(r\"$y$\")\nfig.supylabel(\"probability\")\nfig.suptitle(r\"conditional distributions $f(y\\mid x)$\")\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nX = joint.sum(axis=1)\nY = joint.sum(axis=0)\n\nfig, axes = plt.subplots(ncols=2, sharey=True, sharex=True, figsize=(7, 3))\n\naxes[0].bar(range(n), X, width=0.4)\naxes[0].set_xlabel(r\"$x$\")\naxes[0].set_title(r\"marginal distribution $f(x)$\")\n\naxes[1].bar(range(n), Y, width=0.4)\naxes[1].set_xlabel(r\"$y$\")\naxes[1].set_title(r\"marginal distribution $f(y)$\")\n\nfig.supylabel(\"probability\")\nplt.tight_layout()\nplt.subplots_adjust(wspace=0.4)\nplt.show()\n\n\n\n\n\n\n\n\n\ninfo = entropy(Y) - sum([entropy(conditional) * X[x] for x, conditional in enumerate(conditionals)])\nprint(f\"The mutual information between X and Y is {info:.4f}.\")\n\nThe mutual information between $X$ and $Y$ is 0.2032.\n\n\n\ndef plot_multivar(ax, muX, muY, sigmaX, sigmaY, x, y, labels=False):\n  Sigma = np.array([[sigmaX ** 2, rho * sigmaX * sigmaY], [rho * sigmaX * sigmaY, sigmaY ** 2]])\n  Mu = np.array([muX, muY])\n  U = multivariate_normal(mean=Mu, cov=Sigma)\n  grid = np.dstack((x, y))\n  z = U.pdf(grid)\n  contour = ax.contour(x, y, z, colors=yellow, alpha=0.5)\n  if labels:\n    ax.clabel(contour, inline=True, fontsize=8)\n  \ndef plot_conditional(ax, muX, muY, sigmaX, sigmaY, rho, y, x_obs):\n  mu = muY + (x_obs - muX) * rho * sigmaY / sigmaX\n  sigma = sigmaY * np.sqrt(1 - rho ** 2)\n  x = norm(loc=mu, scale=sigma).pdf(y)\n  ax.plot(-x + x_obs, y, color=blue)\n  ax.fill_betweenx(y, -x + x_obs, x_obs, color=blue, alpha=0.4)\n\ndef plot_combined(ax, muX, muY, sigmaX, sigmaY, rho, x, y, x_obs, labels=False):\n  plot_multivar(ax, muX, muY, sigmaX, sigmaY, x, y, labels)\n  y = np.linspace(np.min(y), np.max(y), num=250)\n  plot_conditional(ax, muX, muY, sigmaX, sigmaY, rho, y, x_obs[0])\n  plot_conditional(ax, muX, muY, sigmaX, sigmaY, rho, y, x_obs[1])\n  plot_conditional(ax, muX, muY, sigmaX, sigmaY, rho, y, x_obs[2])\n  ax.set_title(rf\"$\\rho ={rho}$\")\n  ax.set_xlabel(r\"$x$\")\n  ax.set_ylabel(r\"$y$\")\n  plt.tight_layout()\n  plt.show()\n\n_, ax = plt.subplots()\nx, y = np.mgrid[-1:3:0.01, -4:6:0.01]\n\nmuX = 1\nmuY = 1\nsigmaX = 1\nsigmaY = 2\nrho = 0.15\n\nplot_combined(ax, muX, muY, sigmaX, sigmaY, rho, x, y, x_obs=[0, 1, 2], labels=False)\n\n\n\n\n\n\n\n\n\n_, ax = plt.subplots()\nrho = 0.50\nplot_combined(ax, muX, muY, sigmaX, sigmaY, rho, x, y, x_obs=[0, 1, 2], labels=False)\n\n\n\n\n\n\n\n\n\n_, ax = plt.subplots()\nrho = 0.85\nplot_combined(ax, muX, muY, sigmaX, sigmaY, rho, x, y, x_obs=[0, 1, 2], labels=False)"
  }
]