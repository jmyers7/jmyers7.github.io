[
  {
    "objectID": "writings.html",
    "href": "writings.html",
    "title": "john myers, ph.d.",
    "section": "",
    "text": "The posts below will range from technical deep-dives in machine learning and pure mathematics, to practical applications in finance and risk, and anything else that catches my interests. Some posts will draw from my expertise as a mathematician, while others will reflect my journey as a beginner exploring and learning new fields.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEntropy & information\n\n\n\nInformation theory\n\nProbability theory\n\nEntropy\n\nSurprisal\n\nKL divergence\n\nMutual information\n\nPython\n\nSciPy\n\n\n\n\n\n\n\n\n\nOct 12, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nGaussian mixture models I: a first look\n\n\n\nMixture models\n\nGaussian mixture models\n\nProbabilistic graphical models\n\nMachine learning\n\nProbability theory\n\nPython\n\n\n\n\n\n\n\n\n\nSep 26, 2025\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "teaching/analysis-fa-25.html",
    "href": "teaching/analysis-fa-25.html",
    "title": "mat347 analysis, fall 2025",
    "section": "",
    "text": "instructor:\n\n\njohn myers\n\n\n\n\noffice:\n\n\nmarano 175\n\n\n\n\noffice hours:\n\n\n12-12:30 MWF\n\n\n\n\nsyllabus:\n\n\nlink\n\n\n\n\n\n\n\n\n\n\n\n\nweek\ndate\ntopics\ninfo + due dates\n\n\n\n\n8\n10.17 fri\nexam 1 on sections 1.2-2.4\n\n\n\n\n10.15 wed\n\n\n\n\n\n10.13 mon\n\n\n\n\n7\n10.10 fri\nno class - fall break\n\n\n\n\n10.08 wed\n2.4-2.5 Monotone Conv. and B-W theorems, part 1   \n\n\n\n\n10.06 mon\n2.3 the algebraic and order limit theorems, part 2   \n\n\n\n6\n10.03 fri\nclass cancelled\nweek 6 hw due\n\n\n\n10.01 wed\n2.3 the algebraic and order limit theorems, part 1     2.3 the algebraic and order limit theorems, part 2   \n\n\n\n\n09.29 mon\n2.3 the algebraic and order limit theorems, part 1   \n\n\n\n5\n09.26 fri\n2.2 the limit of a sequence, part 2   \nweek 5 hw due\n\n\n\n09.24 wed\n2.2 the limit of a sequence, part 1   \n\n\n\n\n09.22 mon\n1.5 cardinality, part 2   2.2 the limit of a sequence, part 1   \n\n\n\n4\n09.19 fri\n1.5 cardinality, part 2   \nweek 4 hw due\n\n\n\n09.17 wed\n1.5 cardinality, part 1   \n\n\n\n\n09.15 mon\n1.5 cardinality, part 1   \n\n\n\n3\n09.12 fri\n1.4 consequences of completeness   \nweek 2 & 3 homework due\n\n\n\n09.10 wed\n1.4 consequences of completeness   \n\n\n\n\n09.08 mon\n1.3 axiom of completeness   \n\n\n\n2\n09.05 fri\n1.2 some preliminaries1.3 axiom of completeness   \n\n\n\n\n09.03 wed\n1.2 some preliminaries   \n\n\n\n1\n08.29 fri\nno class\n\n\n\n\n08.27 wed\n1.1 introduction   1.2 some preliminaries   \n\n\n\n\n08.25 mon\n1.1 introduction"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "john myers, ph.d.",
    "section": "",
    "text": "I’m a Ph.D. mathematician and university professor with a background that spans both theoretical and applied mathematics. My undergraduate education was in applied and computational mathematics with a minor in physics. In graduate school and through the first few years of my research career, I specialized in homological algebra and commutative ring theory, focusing on the bridge between modern algebra and geometry and topology. However, my interests have gradually shifted toward more practical domains, where I now work with probability theory, modeling, and machine learning, with particular interest in applications to finance and risk. You can find my early mathematical research on my arXiv page.\n\n\n\n\n\nIn addition to my role as a mathematician, I am also an educator who has taught 13 distinct college mathematics courses ranging from introductory calculus, to applied engineering mathematics, to upper-division theoretical courses, and have been recognized with teaching awards for my classroom work. Notable among these was a novel course in my dissertation research areas of commutative ring theory and algebraic geometry—topics not often taught at the undergraduate level—and a year-long course in probabilistic machine learning for which I wrote the textbook and developed the supporting infrastructure, all available in the navigation bar at the top.\n\n\n\n\n\nMathematics has a unique duality: it’s both deeply theoretical and remarkably practical. The abstract concepts that fascinate pure mathematicians frequently evolve into the foundations of the algorithms and technological systems that shape our daily lives. This website will explore that arc from theory to application, sharing writings on mathematics, probability, machine learning, and their real-world intersections. Writing helps me clarify my own understanding as I continue learning across these fields. Whether you’re a student, researcher, or practitioner, I hope you’ll find ideas and resources here that inform and inspire."
  },
  {
    "objectID": "posts/info-1/index.html",
    "href": "posts/info-1/index.html",
    "title": "Entropy & information",
    "section": "",
    "text": "Large language models (LLMs) like ChatGPT have brought probabilistic models into mainstream conversation. Unlike deterministic models that always produce the same output for a given input, these models generate a probability distribution over many possible outputs. Information theory provides the mathematical framework for understanding these distributions, and how sensitive they are to the inputs of the model.\nTo understand this more concretely, consider what happens when you prompt an LLM. You might ask “What’s the capital of France?” and reliably get “Paris” as the answer. The model is highly confident: the output probability distribution is concentrated over the one-word output “Paris”. But if you ask “Write me a poem about autumn,” you’ll get a different response each time. Here, the probability distribution is spread across countless possible poems, each with some small probability of being generated. In the first case, the model is certain, reflected in the strongly peaked output distribution, while in the latter case it is uncertain, reflected in the highly dispersed output distribution. The input to the model (i.e., the prompt) thus has a strong effect on the certainty in the output distribution.\nThe gap between certainty and uncertainty lies at the heart of information theory. When Claude Shannon founded the field (see Shannon 1948), he was grappling with a fundamental question in telecommunications: how much data can you reliably transmit through a noisy communication channel? Telephone wires introduce random distortions like static and interference, scrambling the signal in unpredictable ways. Shannon realized he could model this mathematically using probability theory, and what began as a framework for analyzing communication over literal telephone wires evolved into an abstract mathematical theory with remarkably broad applications. Indeed, Shannon has been credited with laying the foundations for our modern information-based society.\nInterestingly, Shannon’s notion of entropy has deep connections to the concept of entropy in statistical mechanics and thermodynamics. In 1957, E. T. Jaynes famously formalized this connection in his influential paper (Jaynes 1957), where he wrote:\n\n“The mere fact that the same mathematical expression \\(-\\sum p_i \\log{p_i}\\) [for entropy] occurs both in statistical mechanics and in information theory does not in itself establish any connection between these fields. This can be done only by finding new viewpoints from which thermodynamic entropy and information-theory entropy appear as the same concept. In this paper we suggest a reinterpretation of statistical mechanics which accomplishes this, so that information theory can be applied to the problem of justification of statistical mechanics.””\n\nEven my undergraduate thermodynamics textbook devoted an entire chapter to Shannon’s information theory, emphasizing how these mathematical ideas provide a unifying perspective across seemingly different domains.\nWe will begin by surveying the most basic quantities of information theory: surprisal, entropy, Kullback–Leibler (KL) divergence, and mutual information. Surprisal is a quantity attached to a random outcome that is inversely linked to its probability: a likely outcome is not surprising, while an unlikely one is highly surprising. When we average surprisal over all possible random outcomes, we obtain the entropy, which quantifies the overall uncertainty in a probability distribution. The KL divergence measures how one probability distribution differs from another, capturing the “distance” between them. Mutual information can be viewed as a special kind of KL divergence applied to two random variables, \\(X\\) and \\(Y\\): it measures how much observing \\(X\\) reduces the uncertainty (entropy) in \\(Y\\) on average. This last quantity connects directly to our discussion of LLMs: it captures precisely how much the input prompt narrows down the output distribution.\nThis post is the first in a series on information. In future posts, we will explore other ways the concept of information appears—for example, through \\(\\sigma\\)-algebras—and apply these ideas to a range of problems, from gambling strategies and games of chance (the historical origin of mathematical probability theory), to options pricing in mathematical finance, and to probabilistic models in machine learning. I have discussed information theory previously in a chapter of my book; while some material overlaps with that chapter, this series also introduces many new perspectives and examples.\nIf you’d like to follow along with the code examples in this post, please see the dropdown code block below for the usual imports and setup.\n\n\nCode\n# Import probability distributions, integration, and plotting libraries\nfrom scipy.stats import norm, multivariate_normal, beta, poisson, binom, entropy\nfrom scipy.integrate import quad\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\nfrom matplotlib.ticker import PercentFormatter\nimport matplotlib.gridspec as gridspec\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Set custom matplotlib style (user must use their own style file)\nplt.style.use(\"../../aux-files/custom-theme.mplstyle\")\n\n# Define color palette for plots\nyellow = \"#FFC300\"\nblue = \"#3399FF\"\npink = \"#FF3399\"\npurple = \"#AA77CC\"\ngrey = \"#121212\"\nwhite = \"#E5E5E5\"\n\n\nclass RV:\n    \"\"\"\n    A class representing a random variable (discrete or continuous), with optional support for conditional densities.\n\n    Attributes\n    ----------\n    support : array-like or None\n        The support of the random variable (e.g., possible values for discrete, grid for continuous).\n    density : callable\n        The marginal density or mass function.\n    cond_density : callable or None\n        The conditional density function, if provided.\n    cond_support : array-like or None\n        The support for the conditional variable, if applicable.\n    density_array : np.ndarray or None\n        The marginal density evaluated on the support, if support is array-like.\n    _cond_density_array : dict or None\n        Precomputed conditional densities, if available.\n    \"\"\"\n\n    def __init__(\n        self,\n        support=None,\n        density=None,\n        cond_density=None,\n        cond_support=None,\n    ):\n        \"\"\"\n        Initialize an RV object.\n\n        Parameters\n        ----------\n        support : array-like or None\n            The support of the random variable (e.g., possible values for discrete, grid for continuous).\n        density : callable\n            The marginal density or mass function. Should accept a value (or array of values) and return the density/mass.\n        cond_density : callable, optional\n            The conditional density function f(x|y). Should accept (x, y) and return the density of x given y.\n        cond_support : array-like or None, optional\n            The support for the conditional variable, if applicable.\n        \"\"\"\n        self.support = support\n        self.density = density\n        self.cond_density = cond_density\n        self.cond_support = cond_support\n\n        # Precompute the marginal density array if possible\n        if support is not None and density is not None:\n            self.density_array = np.array([density(x) for x in support])\n        else:\n            self.density_array = None\n\n        # Precompute the conditional density array as a dictionary, if possible\n        if (\n            support is not None\n            and density is not None\n            and cond_density is not None\n            and cond_support is not None\n        ):\n            self._cond_density_array = {\n                y: cond_density(support, y) for y in cond_support\n            }\n        else:\n            self._cond_density_array = None\n\n    def pdf(self, x):\n        \"\"\"\n        Evaluate the marginal density or mass function at x.\n        \"\"\"\n        return self.density(x)\n\n    def pmf(self, x):\n        \"\"\"\n        Alias for pdf, for discrete random variables.\n        \"\"\"\n        return self.pdf(x)\n\n    def set_cond_density(self, cond_density):\n        \"\"\"\n        Set the conditional density function f(x|y).\n        \"\"\"\n        self.cond_density = cond_density\n\n    def cond_pdf(self, x, y):\n        \"\"\"\n        Evaluate the conditional density f(x|y).\n        Raises a ValueError if the conditional density function is not set.\n        \"\"\"\n        if self.cond_density is None:\n            raise ValueError(\"Conditional density function not set.\")\n        return self.cond_density(x, y)\n\n    def __repr__(self):\n        \"\"\"\n        Return a string representation of the RV object.\n        \"\"\"\n        return (\n            f\"RV(support={self.support}, \"\n            f\"density={self.density}, \"\n            f\"conditional_density={self.cond_density})\"\n        )\n\n    def cond_density_array(self, y):\n        \"\"\"\n        Get the conditional density array f(x|y) for a fixed y.\n        Raises a ValueError if the conditional density array is not precomputed.\n        \"\"\"\n        if self._cond_density_array is None:\n            raise ValueError(\"Conditional density array not precomputed.\")\n        return self._cond_density_array[y]"
  },
  {
    "objectID": "posts/info-1/index.html#introduction",
    "href": "posts/info-1/index.html#introduction",
    "title": "Entropy & information",
    "section": "",
    "text": "Large language models (LLMs) like ChatGPT have brought probabilistic models into mainstream conversation. Unlike deterministic models that always produce the same output for a given input, these models generate a probability distribution over many possible outputs. Information theory provides the mathematical framework for understanding these distributions, and how sensitive they are to the inputs of the model.\nTo understand this more concretely, consider what happens when you prompt an LLM. You might ask “What’s the capital of France?” and reliably get “Paris” as the answer. The model is highly confident: the output probability distribution is concentrated over the one-word output “Paris”. But if you ask “Write me a poem about autumn,” you’ll get a different response each time. Here, the probability distribution is spread across countless possible poems, each with some small probability of being generated. In the first case, the model is certain, reflected in the strongly peaked output distribution, while in the latter case it is uncertain, reflected in the highly dispersed output distribution. The input to the model (i.e., the prompt) thus has a strong effect on the certainty in the output distribution.\nThe gap between certainty and uncertainty lies at the heart of information theory. When Claude Shannon founded the field (see Shannon 1948), he was grappling with a fundamental question in telecommunications: how much data can you reliably transmit through a noisy communication channel? Telephone wires introduce random distortions like static and interference, scrambling the signal in unpredictable ways. Shannon realized he could model this mathematically using probability theory, and what began as a framework for analyzing communication over literal telephone wires evolved into an abstract mathematical theory with remarkably broad applications. Indeed, Shannon has been credited with laying the foundations for our modern information-based society.\nInterestingly, Shannon’s notion of entropy has deep connections to the concept of entropy in statistical mechanics and thermodynamics. In 1957, E. T. Jaynes famously formalized this connection in his influential paper (Jaynes 1957), where he wrote:\n\n“The mere fact that the same mathematical expression \\(-\\sum p_i \\log{p_i}\\) [for entropy] occurs both in statistical mechanics and in information theory does not in itself establish any connection between these fields. This can be done only by finding new viewpoints from which thermodynamic entropy and information-theory entropy appear as the same concept. In this paper we suggest a reinterpretation of statistical mechanics which accomplishes this, so that information theory can be applied to the problem of justification of statistical mechanics.””\n\nEven my undergraduate thermodynamics textbook devoted an entire chapter to Shannon’s information theory, emphasizing how these mathematical ideas provide a unifying perspective across seemingly different domains.\nWe will begin by surveying the most basic quantities of information theory: surprisal, entropy, Kullback–Leibler (KL) divergence, and mutual information. Surprisal is a quantity attached to a random outcome that is inversely linked to its probability: a likely outcome is not surprising, while an unlikely one is highly surprising. When we average surprisal over all possible random outcomes, we obtain the entropy, which quantifies the overall uncertainty in a probability distribution. The KL divergence measures how one probability distribution differs from another, capturing the “distance” between them. Mutual information can be viewed as a special kind of KL divergence applied to two random variables, \\(X\\) and \\(Y\\): it measures how much observing \\(X\\) reduces the uncertainty (entropy) in \\(Y\\) on average. This last quantity connects directly to our discussion of LLMs: it captures precisely how much the input prompt narrows down the output distribution.\nThis post is the first in a series on information. In future posts, we will explore other ways the concept of information appears—for example, through \\(\\sigma\\)-algebras—and apply these ideas to a range of problems, from gambling strategies and games of chance (the historical origin of mathematical probability theory), to options pricing in mathematical finance, and to probabilistic models in machine learning. I have discussed information theory previously in a chapter of my book; while some material overlaps with that chapter, this series also introduces many new perspectives and examples.\nIf you’d like to follow along with the code examples in this post, please see the dropdown code block below for the usual imports and setup.\n\n\nCode\n# Import probability distributions, integration, and plotting libraries\nfrom scipy.stats import norm, multivariate_normal, beta, poisson, binom, entropy\nfrom scipy.integrate import quad\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\nfrom matplotlib.ticker import PercentFormatter\nimport matplotlib.gridspec as gridspec\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Set custom matplotlib style (user must use their own style file)\nplt.style.use(\"../../aux-files/custom-theme.mplstyle\")\n\n# Define color palette for plots\nyellow = \"#FFC300\"\nblue = \"#3399FF\"\npink = \"#FF3399\"\npurple = \"#AA77CC\"\ngrey = \"#121212\"\nwhite = \"#E5E5E5\"\n\n\nclass RV:\n    \"\"\"\n    A class representing a random variable (discrete or continuous), with optional support for conditional densities.\n\n    Attributes\n    ----------\n    support : array-like or None\n        The support of the random variable (e.g., possible values for discrete, grid for continuous).\n    density : callable\n        The marginal density or mass function.\n    cond_density : callable or None\n        The conditional density function, if provided.\n    cond_support : array-like or None\n        The support for the conditional variable, if applicable.\n    density_array : np.ndarray or None\n        The marginal density evaluated on the support, if support is array-like.\n    _cond_density_array : dict or None\n        Precomputed conditional densities, if available.\n    \"\"\"\n\n    def __init__(\n        self,\n        support=None,\n        density=None,\n        cond_density=None,\n        cond_support=None,\n    ):\n        \"\"\"\n        Initialize an RV object.\n\n        Parameters\n        ----------\n        support : array-like or None\n            The support of the random variable (e.g., possible values for discrete, grid for continuous).\n        density : callable\n            The marginal density or mass function. Should accept a value (or array of values) and return the density/mass.\n        cond_density : callable, optional\n            The conditional density function f(x|y). Should accept (x, y) and return the density of x given y.\n        cond_support : array-like or None, optional\n            The support for the conditional variable, if applicable.\n        \"\"\"\n        self.support = support\n        self.density = density\n        self.cond_density = cond_density\n        self.cond_support = cond_support\n\n        # Precompute the marginal density array if possible\n        if support is not None and density is not None:\n            self.density_array = np.array([density(x) for x in support])\n        else:\n            self.density_array = None\n\n        # Precompute the conditional density array as a dictionary, if possible\n        if (\n            support is not None\n            and density is not None\n            and cond_density is not None\n            and cond_support is not None\n        ):\n            self._cond_density_array = {\n                y: cond_density(support, y) for y in cond_support\n            }\n        else:\n            self._cond_density_array = None\n\n    def pdf(self, x):\n        \"\"\"\n        Evaluate the marginal density or mass function at x.\n        \"\"\"\n        return self.density(x)\n\n    def pmf(self, x):\n        \"\"\"\n        Alias for pdf, for discrete random variables.\n        \"\"\"\n        return self.pdf(x)\n\n    def set_cond_density(self, cond_density):\n        \"\"\"\n        Set the conditional density function f(x|y).\n        \"\"\"\n        self.cond_density = cond_density\n\n    def cond_pdf(self, x, y):\n        \"\"\"\n        Evaluate the conditional density f(x|y).\n        Raises a ValueError if the conditional density function is not set.\n        \"\"\"\n        if self.cond_density is None:\n            raise ValueError(\"Conditional density function not set.\")\n        return self.cond_density(x, y)\n\n    def __repr__(self):\n        \"\"\"\n        Return a string representation of the RV object.\n        \"\"\"\n        return (\n            f\"RV(support={self.support}, \"\n            f\"density={self.density}, \"\n            f\"conditional_density={self.cond_density})\"\n        )\n\n    def cond_density_array(self, y):\n        \"\"\"\n        Get the conditional density array f(x|y) for a fixed y.\n        Raises a ValueError if the conditional density array is not precomputed.\n        \"\"\"\n        if self._cond_density_array is None:\n            raise ValueError(\"Conditional density array not precomputed.\")\n        return self._cond_density_array[y]"
  },
  {
    "objectID": "posts/info-1/index.html#flows-of-information",
    "href": "posts/info-1/index.html#flows-of-information",
    "title": "Entropy & information",
    "section": "Flows of information",
    "text": "Flows of information\nWe begin by building a mathematical gadget—a kind of probabilistic framework—that models the “flow of information” between two random variables \\(X\\) and \\(Y\\) (or random vectors, or random objects, or …). Such flows are exactly what information theory calls communication channels, and they include many of the predictive probabilistic models in machine learning where information flows from input \\(X\\) to output \\(Y\\). Once these flows have been identified in this section, in the rest of the post we seek to understand how information flowing from \\(X\\) influences and shapes the distribution of \\(Y\\).\nThe simplest flow between \\(X\\) and \\(Y\\) is a functional one, expressed as an equation \\[\ng(X)=Y,\n\\tag{1}\\]\nwhere \\(g\\) is a function. With \\(X\\) as input and \\(Y\\) as output, each \\(X=x\\) produces a unique output \\(y = g(x)\\). Such flows underlie deterministic models. In the case that \\(X\\) and \\(Y\\) take values on the real line \\(\\mathbb{R}\\), we might visualize the situation like this:\n\n\n\n\n\nNote that each value of \\(x\\) along the input (left) axis determines a unique value of \\(y\\) along the output (right) axis.\nOn the other hand, we might suppose that information flows from \\(X\\) to \\(Y\\) in a stochastic fashion, in which \\(X=x\\) no longer determines a single \\(y\\), but instead induces a distribution over possible \\(Y\\) values. This is precisely what a conditional distribution \\(P(Y= y\\mid X=x)\\) captures: given an observed value \\(X=x\\), we have a probability distribution on \\(y\\)’s. We can think of this as a function of the form\n\\[\nx \\mapsto P(Y= y \\mid X=x),\n\\tag{2}\\]\nwhere \\(y\\) plays the role of a variable rather than a fixed quantity, so that \\(P(Y= y \\mid X=x)\\) is a probability distribution and not just a single probability. So this function is rather special: its input is a value \\(x\\), while its output is an entire probability distribution. Mathematicians call such objects Markov kernels. A figure will make this more concrete: in contrast to the deterministic flows drawn above, in the case that \\(X\\) and \\(Y\\) take values on the real line \\(\\mathbb{R}\\), we visualize a stochastic flow as follows, where each value of \\(x\\) is mapped to a probability distribution on \\(y\\)’s:\n\n\n\n\n\nIn our model of a stochastic flow, we therefore use conditional distributions, understood as functions on the conditioning variable.\nIn practice, we often model such flows with a family \\(P(Y=y;\\theta)\\) of distributions parameterized by a vector \\(\\theta\\). The stochastic flow from \\(X\\) to \\(Y\\) is then implemented as a function \\(x\\mapsto \\theta(x)\\) from observations of \\(X\\) to parameters \\(\\theta\\), and the conditional distribution is then defined as\n\\[\nP(Y=y \\mid X=x) = P(Y=y ; \\theta=\\theta(x)).\n\\]\nLinear regression (with known variance \\(\\sigma^2\\)) is a familiar example: here \\(P(Y=y;\\theta)\\) has the normal density\n\\[\nf(y;\\theta) = \\frac{1}{\\sqrt{2\\pi \\sigma^2}} \\exp \\left[ - \\frac{1}{2\\sigma^2}(y-\\theta)^2 \\right],\n\\]\nand with parameter mapping\n\\[\nx\\mapsto \\theta(x) = \\beta_0 + \\beta_1x,\n\\]\nfor some model coefficients \\(\\beta_0\\) and \\(\\beta_1\\). Concisely, the stochastic flow from \\(X\\) to \\(Y\\) in a linear regression model is completely described by specifying\n\\[\n(Y\\mid X=x) \\sim \\mathcal{N}(\\beta_0+\\beta_1x, \\sigma^2).\n\\]\nWe will return to an information-theoretic treatment of linear regression (and other) models in a later post.\nFor now, let’s see all this in action with real distributions in a real-world context. Suppose that \\(X\\) is the number of hours that a randomly chosen student studies for an upcoming exam, restricted to discrete values \\(X = 1,2,3,4,5,6\\). Let’s say that most students study only 2 or 3 hours, with its full distribution (mass function \\(f(x)\\)) shown below:\n\n\nCode\n# Compute the probability mass function for X (hours studied) using a Poisson distribution with mean 3\nfx_array = poisson.pmf(range(1, 7), mu=3)\nfx_array /= fx_array.sum()  # Normalize so probabilities sum to 1\n\n# Define a function to look up the probability for a given value of X\nfx = lambda x: fx_array[x - 1]\n\n# Create an RV object for X, specifying its support and marginal mass function\nX = RV(support=range(1, 7), density=fx)\n\n# Create a new matplotlib figure and axis with a specified size\n_, ax = plt.subplots(figsize=(6, 4))\n\n# Plot a bar chart of the probability mass function for X\nax.bar(X.support, X.density_array, width=0.4, zorder=2)\n\n# Label the x-axis as \"hours studied (x)\"\nax.set_xlabel(r\"hours studied ($x$)\")\n\n# Label the y-axis as \"probability\"\nax.set_ylabel(\"probability\")\n\n# Set the plot title to indicate this is the marginal mass function f(x)\nax.set_title(r\"marginal mass $f(x)$\")\n\n# Set the x-axis ticks to match the possible values of X\nax.set_xticks(X.support)\n\n# Adjust layout for better appearance and display the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nWe might reasonably believe that \\(X\\) is predictive of \\(Y\\), the exam score of a randomly chosen student, taking continuous values in the interval \\([0,1]\\), understood as percentages. The corresponding marginal density \\(f(y)\\) is shown below:\n\n\nCode\n# Define the conditional density function fy_given_x(y, x) as a Beta(x, 3) distribution\nfy_given_x = lambda y, x: beta.pdf(y, a=x, b=3)\n\n# Define the marginal density function fy(y) as a mixture over x, weighted by fx(x)\nfy = lambda y: sum([fy_given_x(y, x) * fx(x) for x in range(1, 7)])\n\n# Create an RV object for Y, specifying its support, marginal density, and conditional density\nY = RV(\n    support=np.linspace(0, 1, num=250),  # Grid of possible y values (test scores)\n    density=fy,  # Marginal density function for Y\n    cond_density=fy_given_x,  # Conditional density function fy_given_x(y, x)\n    cond_support=range(1, 7),  # Possible values of x (hours studied)\n)\n\n# Create a new matplotlib figure and axis for plotting the marginal density of Y\n_, ax = plt.subplots(figsize=(6, 4))\n\n# Plot the marginal density fy(y) over the grid of y values\nax.plot(Y.support, Y.density_array)\n\n# Shade the area under the density curve for visual emphasis\nax.fill_between(Y.support, Y.density_array, zorder=2, alpha=0.1)\n\n# Format the x-axis labels as percentages (since y is a proportion)\nax.xaxis.set_major_formatter(PercentFormatter(xmax=1))\n\n# Set the plot title and axis labels\nax.set_title(r\"marginal density $f(y)$\")\nax.set_xlabel(\"test score ($y$)\")\nax.set_ylabel(\"probability density\")\n\n# Adjust layout for better appearance and display the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nTogether, \\(X\\) and \\(Y\\) have a joint mass/density function \\(f(x,y)\\), visualized in the following ridgeline plot, where each of the horizontal density curves shows \\(f(x,y)\\) as a function of \\(y\\), for fixed \\(x=1,2,3,4,5,6\\).\n\n\nCode\n# Create a new matplotlib figure and axis with a specified size\n_, ax = plt.subplots(figsize=(6, 5))\n\n# Create a custom colormap for conditional distributions\nconditional_stops = [blue, purple, yellow]\nconditional_cmap = LinearSegmentedColormap.from_list(\n    \"conditional_cmap\", conditional_stops\n)\n\n# Generate a list of colors for each value of x using the custom colormap\nconditional_colors = [conditional_cmap(i / 5) for i in range(6)]\n\n# Loop over each possible value of x\nfor x in X.support:\n    # Compute the joint density values for each x, scaled for visualization\n    # This is f(y|x) * f(x), scaled for the ridgeline effect\n    joint_vals = 1.7 * Y.cond_density_array(x) * X.pdf(x)\n\n    # Fill the area between the baseline (x) and the curve (x + joint_vals) for ridgeline effect\n    ax.fill_between(\n        Y.support,\n        x,\n        x + joint_vals,\n        color=conditional_colors[x - 1],\n        zorder=2,\n        alpha=0.1,\n    )\n\n    # Plot the top edge of the density curve for each x\n    ax.plot(Y.support, x + joint_vals, color=conditional_colors[x - 1], zorder=2)\n\n# Label the y-axis as \"hours studied (x)\"\nax.set_ylabel(r\"hours studied ($x$)\")\n\n# Label the x-axis as \"test score (y)\"\nax.set_xlabel(r\"test score ($y$)\")\n\n# Format the x-axis labels as percentages\nax.xaxis.set_major_formatter(PercentFormatter(xmax=1))\n\n# Set the plot title to indicate this is the joint mass/density f(x, y)\nax.set_title(r\"joint mass/density $f(x,y)$\")\n\n# Adjust layout for better appearance and display the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nDividing the joint mass/density \\(f(x,y)\\) by the marginal mass \\(f(x)\\) yields the conditional densities \\(f(y|x)\\). These are just the same density curves in the ridgeline plot above, normalized so that they integrate to \\(1\\) over \\([0,1]\\). They are shown in:\n\n\nCode\n# Create a new matplotlib figure and axis with a specified size\n_, ax = plt.subplots(figsize=(6, 4))\n\n# Loop over each possible value of x (hours studied)\nfor x in X.support:\n    # Plot the conditional density f(y|x) for each x as a Beta(x, 3) distribution\n    ax.plot(\n        Y.support,\n        Y.cond_density_array(x),\n        color=conditional_colors[x - 1],\n        label=x\n    )\n\n# Add a legend indicating the value of x for each curve\nax.legend(title=r\"hours studied ($x$)\", loc=\"center left\", bbox_to_anchor=(1, 0.5))\n\n# Format the x-axis labels as percentages (since y is a proportion)\nax.xaxis.set_major_formatter(PercentFormatter(xmax=1))\n\n# Set the plot title to indicate these are conditional densities f(y|x)\nax.set_title(r\"conditional densities $f(y|x)$\")\n\n# Label the axes\nax.set_xlabel(r\"test score ($y$)\")\nax.set_ylabel(\"probability density\")\n\n# Adjust layout for better appearance and display the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nIn our information-theoretic terminology, the conditional density\n\\[\nx\\mapsto f(y|x),\n\\]\nthought of as a function of \\(x\\), models the stochastic flow of information from \\(X\\) to \\(Y\\).\nThe marginal density \\(f(y)\\) shows moderate uncertainty—it’s somewhat peaked, but not sharply. An exam score randomly drawn from \\(Y\\) will be mildly uncertain, mildly surprising. The exact amount of uncertainty in \\(Y\\) will be measured through its entropy, denoted \\(H(Y)\\), introduced in the next section. In contrast, the conditional densities \\(f(y|x)\\) exhibit less uncertainty compared to the marginal, especially for values of \\(x\\) closer to \\(6\\). The uncertainty remaining in \\(Y\\) after observing \\(X=x\\) is measured by the conditional entropy, denoted \\(H(Y\\mid X=x)\\). Averaging this conditional entropy over \\(X\\) yields the quantity\n\\[\nH(Y\\mid X) \\overset{\\text{def}}{=}E_{x\\sim f(x)}(H(Y\\mid X=x)),\n\\]\nthe average amount of uncertainty in \\(Y\\), given \\(X\\). Then, it is a general observation that\n\\[\nH(Y) \\geq H(Y\\mid X)\n\\]\nfor any pair of random variables \\(X\\) and \\(Y\\), reflecting the obvious fact that no additional information will ever increase the uncertainty in \\(Y\\). Thus, the quantity\n\\[\nI(X,Y) \\overset{\\text{def}}{=}H(Y) - H(Y\\mid X)\n\\]\nis a nonnegative proxy for the amount of information transmitted from \\(X\\) to \\(Y\\): if it is large, then the gap between \\(H(Y)\\) and \\(H(Y\\mid X)\\) is wide, indicating that observations of \\(X\\) greatly reduce the uncertainty in \\(Y\\). We understand this as a “large amount of information” is transmitted from \\(X\\) to \\(Y\\). Conversely, when \\(I(X,Y)\\) is small, observations of \\(X\\) reveal little about \\(Y\\); in the extreme case \\(I(X,Y)=0\\), the two are independent. The quantity \\(I(X,Y)\\) is exactly the mutual information between \\(X\\) and \\(Y\\), introduced in the next section."
  },
  {
    "objectID": "posts/info-1/index.html#surprisal-and-entropy",
    "href": "posts/info-1/index.html#surprisal-and-entropy",
    "title": "Entropy & information",
    "section": "Surprisal and entropy",
    "text": "Surprisal and entropy\nAs mentioned in the introduction, entropy measures the uncertainty in the outcome of a random variable. More precisely, it is the average surprisal of an observation. Surprisal varies inversely with probability: large probabilities yield small surprisals, and small probabilities yield large ones.\nThis inverse relationship is given by the function \\(s = -\\log{p}\\), linking a probability \\(p\\in [0,1]\\) with a surprisal \\(s\\in [0,\\infty)\\). The graph of this relationship is shown in:We write \\(\\log\\) for the base-\\(e\\) logarithm.\n\n\nCode\n# Create a grid of probability values from 0.01 to 1 (avoiding 0 to prevent log(0))\nmesh = np.linspace(0.01, 1, num=100)\n\n# Create a new matplotlib figure and axis with a specified size\n_, ax = plt.subplots(figsize=(4, 3))\n\n# Plot the surprisal function s = -log(p) as a function of probability p\nax.plot(mesh, -np.log(mesh), color=yellow)\n\n# Label the x-axis as probability (p)\nax.set_xlabel(r\"probability ($p$)\")\n\n# Label the y-axis as surprisal (s)\nax.set_ylabel(r\"surprisal ($s$)\")\n\n# Adjust layout for better appearance and display the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nAt first glance, many functions might seem equally capable of expressing this inverse relationship between probability and surprisal—so why the choice of base-\\(e\\) logarithm? It turns out that if one starts from a few natural axioms that any reasonable notion of surprisal should satisfy, then you can prove all such surprisal functions must be proportional to negative logarithms (see, for example, the discussion in Section 9 in Rioul 2021). The choice of base \\(e\\) is then somewhat arbitrary, akin to choosing units. Another popular choice is base \\(2\\), which aligns naturally with bit strings in coding theory. In base \\(e\\), information content is measured in so-called natural units, or nats; in base \\(2\\), it is measured in binary units, or bits. (See Section 10 in the aforementioned reference Rioul 2021 for more on units.)\nThis link between surprisals and probabilities may be extended to a link between surprisal and probability densities in the case that the probabilities are continuous. Since it is inconvenient to continually distinguish between mass and density functions in all definitions and theorems, we will follow the convention in measure-theoretic probability theory and refer to all probability mass and density functions as densities and denote them all by \\(f\\). In this scheme, a probability mass function really is a density function relative to the counting measure.\nWith this convention in mind, the following definition applies to both discrete and continuous random variables:\n\n\n\n\n\n\n\nDefinition 1 Let \\(X\\) and \\(Y\\) be two random variables with density functions \\(f(x)\\) and \\(f(y)\\), respectively.\n\nThe surprisal of an observed value \\(X=x\\) is the quantity \\[\n  s(x) = -\\log{f(x)}.\n  \\]\nThe conditional surprisal of an observed value \\(Y=y\\), given \\(X=x\\), is the quantity \\[\n  s(y|x) = -\\log{f(y|x)},\n  \\] where \\(f(y|x)\\) is the conditional density of \\(Y\\) given \\(X\\).\n\n\n\n\n\nFor a simple example of the relationship between discrete probabilities and surprisals, let’s bring back our random variable \\(X\\) from the previous section, which tallied the number of hours a randomly chosen student studied for the upcoming exam:\n\n\nCode\n# Create a figure with two subplots side by side\nfig, axes = plt.subplots(ncols=2, figsize=(6, 3))\n\n# Plot the marginal probability mass function f(x) as a bar chart on the first subplot\naxes[0].bar(X.support, X.density_array, width=0.4, zorder=2)\naxes[0].set_ylabel(r\"probability mass\")  # Label y-axis\naxes[0].set_title(r\"marginal density $f(x)$\")  # Set subplot title\naxes[0].set_xticks(X.support)  # Set x-ticks to match possible values of x\n\n# Plot the marginal surprisal s(x) = -log(f(x)) as a bar chart on the second subplot\naxes[1].bar(X.support, -np.log(X.density_array), width=0.4, zorder=2)\naxes[1].set_ylabel(r\"surprisal mass\")  # Label y-axis\naxes[1].set_title(r\"marginal surprisal $s(x)$\")  # Set subplot title\naxes[1].set_xticks(X.support)  # Set x-ticks to match possible values of x\n\n# Add a shared x-axis label for both subplots\nfig.supxlabel(r\"hours studied ($x$)\")\n\n# Adjust layout for better appearance and display the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nBecause a probability density (mass) function of a discrete random variable must take values in \\([0,1]\\), its surprisal function is never negative. However, the probability density function of a continuous random variable may take on values larger than \\(1\\), which means that the associated surprisal density function can be negative. This can be seen for the continuous random variable \\(Y\\) from the previous section, whose density can exceed \\(1\\) in regions of high concentration—hence its surprisal can dip below zero.\n\n\nCode\n# Create a figure with two subplots side by side\nfig, axes = plt.subplots(ncols=2, figsize=(6, 3))\n\n# Plot the marginal probability density function f(y) on the first subplot\naxes[0].plot(Y.support, Y.density_array)\naxes[0].xaxis.set_major_formatter(\n    PercentFormatter(xmax=1)\n)  # Format x-axis as percentages\naxes[0].set_title(r\"marginal density $f(y)$\")  # Set subplot title\naxes[0].set_ylabel(\"probability density\")  # Label y-axis\n\n# Plot the marginal surprisal s(y) = -log(f(y)) on the second subplot\naxes[1].plot(Y.support[:-1], -np.log(Y.density_array[:-1]))\naxes[1].xaxis.set_major_formatter(\n    PercentFormatter(xmax=1)\n)  # Format x-axis as percentages\naxes[1].set_title(r\"marginal surprisal $s(y)$\")  # Set subplot title\naxes[1].set_ylabel(\"surprisal density\")  # Label y-axis\n\n# Add a shared x-axis label for both subplots\nfig.supxlabel(\"test score ($y$)\")\n\n# Adjust layout for better appearance and display the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nHaving defined surprisal for individual outcomes, entropy emerges naturally as its average—capturing the typical “surprise” we can expect.\n\n\n\n\n\n\n\nDefinition 2 Let \\(X\\) and \\(Y\\) be two random variables with density functions \\(f(x)\\) and \\(f(y)\\), respectively.\n\nThe entropy of \\(X\\) is the quantity \\[\n  H(X) = E_{x\\sim f(x)}(s(x)).\n  \\]\nThe conditional entropy of \\(Y\\), given an observed value \\(X=x\\), is the quantity \\[\n  H(Y\\mid X=x) = E_{y\\sim f(y|x)}(s(y\\mid x)),\n  \\] where \\(f(y|x)\\) is the conditional density of \\(Y\\) given \\(X\\).\nThe conditional entropy of \\(Y\\), given \\(X\\), is the quantity\n\n\\[\nH(Y\\mid X) = E_{x\\sim f(x)}(H(Y\\mid X=x)).\n\\]\n\n\n\n\nIn the case that \\(X\\) is discrete, then the entropy \\(H(X)\\) is a sum of either a finite or countably infinite number of terms:\n\\[\nH(X) = \\sum_{x\\in \\mathbb{R}} f(x)s(x) = - \\sum_{x\\in \\mathbb{R}} f(x) \\log{f(x)}.\n\\]\nIf \\(X\\) is continuous, then the entropy is an integral:\n\\[\nH(X) = \\int f(x) s(x) \\ dx = - \\int f(x) \\log{f(x)} \\ dx,\n\\]\nwhere, by convention, \\(\\int\\) denotes integration over \\(\\mathbb{R}\\). In the literature, the entropy of a continuous random variable is often called differential entropy.\nThe stats submodule of the SciPy library contains a convenient method called entropy for computing entropies of discrete random variables. We use it to compute the entropy \\(H(X)\\), where \\(X\\) is the “hours studied” random variable:\n\nprint(f\"The probability mass function f(x) of X is:\\n\")\nfor x in X.support:\n    # Print the probability mass for each possible value of X (1 through n)\n    print(f\"    f({x}) =\", round(X.pdf(x), 3))\n\n# Compute and print the entropy H(X) using scipy's entropy function\nprint(f\"\\nThe entropy H(X) is {entropy(X.density_array):.3f}.\")\n\nThe probability mass function f(x) of X is:\n\n    f(1) = 0.163\n    f(2) = 0.244\n    f(3) = 0.244\n    f(4) = 0.183\n    f(5) = 0.11\n    f(6) = 0.055\n\nThe entropy H(X) is 1.698.\n\n\nWe can use the quad method in the integrate submodule of SciPy to compute differential entropies. For the “exam score” random variable \\(Y\\), we compute:\n\n# Compute the differential entropy H(Y) by integrating -f(y) * log(f(y)) over [0, 1]\ndiff_entropy, _ = quad(func=lambda y: -Y.pdf(y) * np.log(Y.pdf(y)), a=0, b=1)\n\n# Print the computed differential entropy value\nprint(f\"The differential entropy H(Y) is {diff_entropy:.3f}.\")\n\nThe differential entropy H(Y) is -0.131.\n\n\nNotice that \\(H(Y)\\) turns out to be negative—a reminder that differential entropy behaves quite differently from its discrete cousin."
  },
  {
    "objectID": "posts/info-1/index.html#kullbackleibler-divergence-and-mutual-information",
    "href": "posts/info-1/index.html#kullbackleibler-divergence-and-mutual-information",
    "title": "Entropy & information",
    "section": "Kullback–Leibler divergence and mutual information",
    "text": "Kullback–Leibler divergence and mutual information\nIn this section, we develop an information-theoretic way to measure how “far apart” two probability distributions are. By way of motivation, we consider two probability measures on a single finite probability space \\(\\Omega\\), so that the two measures have mass functions \\(f(\\omega)\\) and \\(g(\\omega)\\). The metric we’ll use is the mean logarithmic relative magnitude, a measure that captures not the absolute difference between probabilities, but how one probability scales relative to another. To define it, we first define the absolute relative magnitude of the probability \\(f(\\omega)\\) to the probability \\(g(\\omega)\\) as the ratio \\(f(\\omega)/g(\\omega)\\). Then, logarithmic relative magnitude refers to the base-\\(e\\) logarithm of the absolute relative magnitude:\n\\[\n\\log\\left( \\frac{f(\\omega)}{g(\\omega)} \\right).\n\\]\nIntuitively, this logarithm tells us the “order of magnitude” difference between \\(f(\\omega)\\) and \\(g(\\omega)\\). If \\(f(\\omega)\\approx e^k\\) and \\(g(\\omega)\\approx e^l\\), then the log ratio is roughly \\(k-l\\).\nPerhaps the most obvious immediate benefit of introducing the logarithm is that it yields a workable number when \\(f(\\omega)\\) and \\(g(\\omega)\\) each have widely different magnitudes. For example, let’s suppose that the mass functions \\(f(\\omega)\\) and \\(g(\\omega)\\) are given by\n\\[\nf(\\omega) = \\binom{10}{\\omega} (0.4)^\\omega(0.6)^{10-\\omega} \\quad \\text{and} \\quad g(\\omega) = \\binom{10}{\\omega} (0.9)^\\omega(0.1)^{10-\\omega}\n\\]\nfor \\(\\omega\\in \\{0,1,\\ldots,10\\}\\). These are the mass functions of a \\(\\mathcal{B}in(10,0.4)\\) and \\(\\mathcal{B}in(10,0.9)\\) random variable, respectively. We then plot histograms for these mass functions, along with histograms of the absolute and logarithmic relative magnitudes:\n\n\nCode\n# Define the possible values of omega (0 through 10)\nomegas = np.arange(0, 11)\n\n# Compute the probability mass functions for two Binomial distributions:\n# p: Binomial(n=10, p=0.4)\n# q: Binomial(n=10, p=0.9)\np = binom(n=10, p=0.4).pmf(omegas)\nq = binom(n=10, p=0.9).pmf(omegas)\n\n# Titles for each subplot\ntitles = [\n    \"$f(\\\\omega)$\",  # PMF of first distribution\n    \"$g(\\\\omega)$\",  # PMF of second distribution\n    \"$\\\\frac{f(\\\\omega)}{g(\\\\omega)}$\",  # Ratio of PMFs\n    \"$\\\\log\\\\left(\\\\frac{f(\\\\omega)}{g(\\\\omega)}\\\\right)$\",  # Log-ratio of PMFs\n]\n\n# Data to plot in each subplot\nprobs = [p, q, p / q, np.log(p / q)]\n\n# Y-axis limits for each subplot for better visualization\nylims = [(0, 0.4), (0, 0.4), (-50, 0.75e8), (-10, 20)]\n\n# Create a 2x2 grid of subplots\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 5), sharex=True)\n\n# Loop over each subplot, plotting the corresponding data\nfor title, prob, ylim, axis in zip(titles, probs, ylims, axes.flatten()):\n    axis.bar(omegas, prob, width=0.4, zorder=2)  # Bar plot for each omega\n    axis.set_xticks(ticks=omegas)  # Set x-ticks to omega values\n    axis.set_ylim(ylim)  # Set y-axis limits\n    axis.set_title(title)  # Set subplot title\n\n# Add a shared x-axis label for all subplots\nfig.supxlabel(\"$\\\\omega$\")\n\n# Adjust layout for better appearance and spacing\nplt.tight_layout()\nplt.subplots_adjust(hspace=0.5)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe second row makes the point vividly: the absolute relative magnitudes span such wildly different scales that the plot is almost useless, and numerical computations would be unstable. The logarithmic version, by contrast, stays well-behaved and informative.\nWe obtain a single-number summary of the logarithmic relative magnitudes by taking their mean with respect to the mass function \\(f(\\omega)\\), giving us the number\n\\[\nE_{\\omega\\sim f(\\omega)} \\left[\\log\\left( \\frac{f(\\omega)}{g(\\omega)} \\right)\\right] = \\sum_{\\omega\\in \\Omega} f(\\omega) \\log\\left( \\frac{f(\\omega)}{g(\\omega)} \\right).\n\\tag{3}\\]\nObserve that we could have instead computed the mean relative to \\(g(\\omega)\\), giving us the number\n\\[\nE_{\\omega\\sim g(\\omega)} \\left[\\log\\left( \\frac{f(\\omega)}{g(\\omega)} \\right)\\right] = \\sum_{\\omega\\in \\Omega} g(\\omega) \\log\\left( \\frac{f(\\omega)}{g(\\omega)} \\right).\n\\tag{4}\\]\nBut notice that\n\\[\nE_{\\omega\\sim g(\\omega)} \\left[\\log\\left( \\frac{f(\\omega)}{g(\\omega)} \\right)\\right] = - E_{\\omega\\sim g(\\omega)} \\left[\\log\\left( \\frac{g(\\omega)}{f(\\omega)} \\right)\\right],\n\\]\nwhere the right-hand side is the negative of a number of the form (3). So, at least up to sign, it doesn’t really matter which of the two numbers (3) or (4) that we use to develop our theory. Our choice of (3) has the benefit of making the KL divergence nonnegative when the distributions are discrete.\nThese considerations lead us to:\n\n\n\n\n\n\n\nDefinition 3 Let \\(X\\) and \\(Y\\) be two random variables with density functions \\(f(x)\\) and \\(g(x)\\), respectively. The Kullback–Leibler divergence (or just KL divergence) from \\(X\\) to \\(Y\\), denoted \\(D(X \\parallel Y)\\), is the mean logarithmic relative magnitude:\n\\[\nD(X \\parallel Y) = E_{x\\sim f(x)} \\left[ \\log \\left( \\frac{f(x)}{g(x)}\\right) \\right].\n\\]\n\n\n\n\nTechnically, \\(D(X\\parallel Y)\\) is defined only when \\(f(x)=0\\) implies \\(g(x)=0\\) for all \\(x\\)—a condition known as absolute continuity in measure theory. If \\(X\\) and \\(Y\\) are continuous, then \\(D(X\\parallel Y)\\) is often called the differential KL divergence.\nFor some examples of differential KL divergences, let’s consider the conditional random variables \\(Y\\mid X=x\\) from the previous section, which give the exam score \\(Y\\) of a randomly chosen student if they had studied \\(X=x\\) hours (for \\(x=1,2,\\ldots,6\\)). In the figure below, we plot the densities \\(f(y\\mid x)\\) of the conditional distributions and compute the five differential KL divergences\n\\[\nD\\left( (Y\\mid X=1) \\parallel (Y\\mid X=x) \\right)\n\\]\nfor \\(x=2,3,4,5,6\\).\n\n\nCode\n# Define the integrand for KL divergence between two Beta distributions:\ndef integrand(y, x1, x2):\n    return Y.cond_pdf(y, x1) * np.log(Y.cond_pdf(y, x1) / Y.cond_pdf(y, x2))\n\n\n# Compute KL divergence D((Y|X=1) || (Y|X=x)) for x = 2, 3, 4, 5, 6\nKL_div = np.empty(5)\nfor x in range(2, 7):\n    KL_div[x - 2], _ = quad(func=integrand, args=(1, x), a=0, b=1)\n\n# Set up a 2x6 grid for custom subplot arrangement\nfig = plt.figure(figsize=(8, 5))\ngs = gridspec.GridSpec(2, 6, figure=fig)\nax1 = fig.add_subplot(gs[0, 0:2])\nax2 = fig.add_subplot(gs[0, 2:4])\nax3 = fig.add_subplot(gs[0, 4:6])\nax4 = fig.add_subplot(gs[1, 1:3])\nax5 = fig.add_subplot(gs[1, 3:5])\naxes = [ax1, ax2, ax3, ax4, ax5]\n\n# For each subplot, plot the two conditional densities and annotate with KL divergence\nfor x, ax in zip(range(2, 7), axes):\n    # Plot f(y|x=1) in blue\n    ax.plot(Y.support, Y.cond_density_array(1), color=blue, zorder=2, label=\"x = 1\")\n    ax.fill_between(\n        Y.support, Y.cond_density_array(1), zorder=2, color=blue, alpha=0.1\n    )\n\n    # Plot f(y|x) in yellow\n    ax.plot(\n        Y.support, Y.cond_density_array(x), color=yellow, zorder=2, label=f\"x = {x}\"\n    )\n    ax.fill_between(\n        Y.support, Y.cond_density_array(x), zorder=2, color=yellow, alpha=0.1\n    )\n\n    # Annotate with the computed KL divergence\n    ax.set_title(f\"KL div. = {KL_div[x - 2]:.3f}\")\n    ax.set_ylim(0, 4)\n    ax.legend(loc=\"upper right\")\n\n# Adjust layout and spacing for better appearance\nplt.tight_layout()\nplt.subplots_adjust(hspace=0.5)\nplt.show()\n\n\n\n\n\n\n\n\n\nEach subplot contains the blue density curve \\(f(y\\mid x=1)\\), along with a yellow density curve \\(f(y\\mid x)\\) for \\(x=2,3,4,5,6\\). As \\(x\\) gets larger, we can see visually that the densities become more unalike; this increasing dissimilarity is reflected in larger KL divergences as \\(x\\) gets larger.\nAt the other end of the spectrum, we have \\(D(X \\parallel Y) = 0\\) when \\(X\\) and \\(Y\\) are identically distributed. And, at least when the variables are discrete, it is a basic but important fact that we always have \\(D(X \\parallel Y)\\geq 0\\), with equality if and only if \\(X\\) and \\(Y\\) are identically distributed; this is referred to as Gibbs’ inequality (see here for a proof). So, the KL divergence has several properties that make it a good measure for the “distance” between two probability distributions. However, note that this distance is not symmetric, in the sense that we have\n\\[\nD(X\\parallel Y) \\neq D(Y \\parallel X)\n\\]\nin general.\nKL divergence measures how one distribution differs from another. To study relationships between random variables, we apply it to their joint and marginal distributions. If \\(X\\) and \\(Y\\) are independent, their joint density factors as the product of their marginals, \\(f(x,y)=f(x)f(y)\\). Thus, a measure of the “information flow” between \\(X\\) and \\(Y\\) is the distance—in the sense of KL divergence—from the true joint density \\(f(x,y)\\) to the product densities \\(f(x)f(y)\\). This leads us to:\n\n\n\n\n\n\n\nDefinition 4 Let \\(X\\) and \\(Y\\) be two random variables with density functions \\(f(x)\\) and \\(f(y)\\). The mutual information shared between \\(X\\) and \\(Y\\), denoted \\(I(X,Y)\\), is the quantity\n\\[\nI(X,Y) = E_{(x,y)\\sim f(x,y)} \\left[ \\log \\left( \\frac{f(x,y)}{f(x)f(y)} \\right) \\right].\n\\tag{5}\\]\n\n\n\n\nThe product \\(f(x)f(y)\\) is the density of some probability distribution on \\(\\mathbb{R}^2\\), which would coincide with the true joint probability distribution (with density \\(f(x,y)\\)) if the variables were independent. So, the mutual information is the KL divergence between two probability distributions on \\(\\mathbb{R}^2\\), and we have \\(I(X,Y)=0\\) when \\(X\\) and \\(Y\\) are independent.\nAs an example, we return once more to our random variables \\(X\\) and \\(Y\\), the “hours studied” discrete variable and the “exam score” continuous variable. In this case, the joint distribution of \\(X\\) and \\(Y\\) is a mixed discrete-continuous one, so the formula (5) gives\n\\[\nI(X,Y) = \\sum_{x=1}^6 \\int_0^1 f(x,y) \\log\\left(\\frac{f(x,y)}{f(x)f(y)} \\right) \\ dy,\n\\]\nwhere \\(f(x,y)\\) is the true joint mass-density function and \\(f(x)\\) and \\(f(y)\\) are the marginal mass and densities, respectively. We implement this formula directly in Python, using the quad method in the integrate submodule of SciPy for integration:\n\n# Compute the true joint density f(x, y) = f(x) * f(y|x)\ndef fxy(x, y):\n    return X.pdf(x) * Y.cond_pdf(y, x)\n\n\n# Define the integrand for mutual information:\n# f(x, y) * log(f(x, y) / (f(x) * f(y)))\ndef integrand(x, y):\n    return fxy(x, y) * np.log(fxy(x, y) / (X.pdf(x) * Y.pdf(y)))\n\n\n# For each x, create a function of y for integration over y in [0, 1]\nfuncs = [lambda y, x=x: integrand(x, y) for x in range(1, 7)]\n\n# Compute the mutual information by summing the integrals over y for each x\nmutual_info = sum([quad(func, a=0, b=1)[0] for func in funcs])\n\n# Print the computed mutual information I(X, Y)\nprint(f\"The mutual information I(X,Y) is {mutual_info:.3f}.\")\n\nThe mutual information I(X,Y) is 0.201.\n\n\nUsing the definitions of marginal and conditional entropies given in Definition 2, one easily proves that the mutual information \\(I(X,Y)\\) may be computed as described in:\n\n\n\n\n\n\n\nTheorem 1 (Mututal information is entropy) Let \\(X\\) and \\(Y\\) be two random variables. Then\n\\[\nI(X,Y) = H(Y) - H(Y\\mid X).\n\\tag{6}\\]\n\n\n\n\nThus, the mutual information measures the amount of entropy in \\(Y\\) that is “leftover” after having observed \\(X\\). In other words, it quantifies how much knowing \\(X\\) reduces uncertainty about \\(Y\\).\nWe end this section by using formula (6) to re-do our computation of the mutual information \\(I(X,Y)\\) from above. We get the same answer:\n\n# the differential entropy H(Y) is stored in `diff_entropy`\n\n# For each x, define a function of y for the conditional entropy integrand: -f(y|x) * log(f(y|x))\nfuncs = [lambda y, x=x: -Y.cond_pdf(y, x) * np.log(Y.cond_pdf(y, x)) for x in X.support]\n\n# Compute the conditional entropy H(Y|X=x) for each x by integrating over y in [0, 1]\ncond_entropies = [quad(func, a=0, b=1)[0] for func in funcs]\n\n# Compute H(Y) - sum_x f(x) * H(Y|X=x), which equals the mutual information I(X, Y)\ndiff_entropy - sum([cond_entropies[x - 1] * X.pdf(x) for x in X.support])\n\n# Print the previously computed mutual information for comparison\nprint(f\"The mutual information I(X,Y) is {mutual_info:.3f}.\")\n\nThe mutual information I(X,Y) is 0.201."
  },
  {
    "objectID": "posts/info-1/index.html#mutual-information-of-jointly-normal-random-variables",
    "href": "posts/info-1/index.html#mutual-information-of-jointly-normal-random-variables",
    "title": "Entropy & information",
    "section": "Mutual information of jointly normal random variables",
    "text": "Mutual information of jointly normal random variables\nUseful intuition for the mutual information \\(I(X,Y)\\) arises from the simple case of jointly normal variables, where a closed-form expression can be obtained. As a first step toward this formula, we compute the differential entropy of a single normal random variable:For background on normal random vectors, see here.\n\n\n\n\n\n\n\nTheorem 2 (Entropy of a normal random variable) If \\(X\\sim \\mathcal{N}(\\mu,\\sigma^2)\\), then\n\\[\nH(X) = \\frac{1}{2}\\log(2\\pi e \\sigma^2),\n\\]\nwhere \\(e\\) is the base of the natural logarithm.\n\n\n\n\n\n\n\n\n\n\nNoteProof.\n\n\n\n\n\nLetting \\(f(x)\\) be the density of \\(X\\), we compute:\n\\[\n\\begin{align*}\nH(X) &= -\\int f(x) \\log{f(x)} \\ dx \\\\\n&= - \\int f(x) \\log\\left\\{\\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left[ -\\frac{1}{2\\sigma^2}(x-\\mu)^2 \\right]\\right\\} \\ dx \\\\\n&= - \\log\\left(\\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\right) \\int f(x) \\ dx + \\frac{1}{2\\sigma^2}\\int f(x)(x-\\mu)^2 \\ dx \\\\\n&= \\frac{1}{2}\\log(2\\pi \\sigma^2) + \\frac{1}{2} \\\\\n&= \\frac{1}{2}\\log(2\\pi e \\sigma^2)\n\\end{align*}\n\\]\nwhere we’ve used \\(\\int f(x) \\ dx =1\\) and \\(\\int f(x)(x-\\mu)^2 \\ dx = \\sigma^2\\).\n\n\n\nIt is well known that the conditional distributions of a normal random vector are themselves normal; we include here the result for a \\(2\\)-dimensional normal random vector. The proof follows directly from standard properties of multivariate normal distributions and is omitted for brevity.\n\n\n\n\n\n\n\nTheorem 3 (Conditional distributions of normal vectors are normal) Let \\((X,Y) \\sim \\mathcal{N}_2(\\boldsymbol{\\mu}, \\boldsymbol{\\Sigma})\\) be a \\(2\\)-dimensional normal random vector with\n\\[\n\\boldsymbol{\\mu}= \\begin{bmatrix} \\mu_X \\\\ \\mu_Y \\end{bmatrix} \\quad \\text{and} \\quad \\boldsymbol{\\Sigma}= \\begin{bmatrix}\n\\sigma_X^2 & \\rho \\sigma_X \\sigma_Y \\\\\n\\rho \\sigma_X \\sigma_Y & \\sigma_Y^2\n\\end{bmatrix},\n\\]\nwhere \\(X \\sim \\mathcal{N}(\\mu_X,\\sigma_X^2)\\), \\(Y\\sim \\mathcal{N}(\\mu_Y,\\sigma_Y^2)\\), and \\(\\rho\\) is the correlation of \\(X\\) and \\(Y\\). Then\n\\[\n(Y \\mid X=x) \\sim \\mathcal{N}\\left(\\mu_Y + (x-\\mu_X) \\frac{\\rho \\sigma_Y}{\\sigma_X}, \\ \\sigma_Y^2(1-\\rho^2) \\right)\n\\]\nfor all \\(x\\).\n\n\n\n\nThe next result contains the formula for the mutual information of two jointly normal random variables; its proof is an easy application of our previous results. Notice the mutual information only depends on the correlation between the variables, as intuition might suggest.\n\n\n\n\n\n\n\nTheorem 4 (Mutual information of jointly normal variables) Let \\((X,Y) \\sim \\mathcal{N}_2(\\boldsymbol{\\mu}, \\boldsymbol{\\Sigma})\\) be a \\(2\\)-dimensional normal random vector. Then\n\\[\nI(X,Y) = -\\frac{1}{2} \\log \\left(1-\\rho^2 \\right),\n\\]\nwhere \\(\\rho\\) is the correlation of \\(X\\) and \\(Y\\).\n\n\n\n\n\n\n\n\n\n\nNoteProof.\n\n\n\n\n\nFrom Theorem 2 and Theorem 3, we get that\n\\[\nH(Y\\mid X=x) = \\frac{1}{2}\\log\\left(2\\pi e \\sigma_Y^2(1-\\rho^2)\\right),\n\\]\nwhere \\(\\sigma_Y\\) is the standard deviation of \\(Y\\). Since this does not depend on \\(x\\), we have\n\\[\nH(Y\\mid X) = E_{x\\sim f(x)}\\left(H(Y\\mid X=x) \\right) = \\frac{1}{2}\\log\\left(2\\pi e \\sigma_Y^2(1-\\rho^2)\\right),\n\\]\nwhere \\(f(x)\\) is the marginal density of \\(X\\). But another application of Theorem 2 gives\n\\[\nH(Y) = \\frac{1}{2}\\log(2\\pi e \\sigma_Y^2),\n\\]\nand so by Theorem 1 we have\n\\[\n\\begin{align*}\nI(X,Y) &= H(Y) - H(Y\\mid X) \\\\\n&= \\frac{1}{2}\\log(2\\pi e \\sigma_Y^2) - \\frac{1}{2}\\log\\left(2\\pi e \\sigma_Y^2(1-\\rho^2)\\right) \\\\\n&= -\\frac{1}{2} \\log \\left(1-\\rho^2 \\right).\n\\end{align*}\n\\]\n\n\n\nHence, the larger the correlation between the marginal normals, the larger the mutual information. To see this in action with a concrete example, let’s suppose that we have \\((X,Y) \\sim \\mathcal{N}_2(\\boldsymbol{\\mu}, \\boldsymbol{\\Sigma})\\), where\n\\[\n\\boldsymbol{\\mu}= \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix} \\quad \\text{and} \\quad \\boldsymbol{\\Sigma}= \\begin{bmatrix}\n1 & 2\\rho  \\\\\n2\\rho  & 4\n\\end{bmatrix},\n\\]\nand \\(\\rho\\) is the correlation of \\(X\\) and \\(Y\\) (hence the marginal standard deviations are \\(\\sigma_X = 1\\) and \\(\\sigma_Y=2\\)). In the second and third plots below, we have selected two correlations \\(\\rho=0.5,0.85\\) and computed the corresponding mutual information \\(I(X,Y)\\). The isoprobability contours of the joint normal density \\(f(x,y)\\) are shown in yellow, while the conditional normal densities \\(f(y|x)\\) are shown in blue for each of \\(x=-1, 0, 1\\). For comparison, the marginal density \\(f(y)\\) has been shown in the first plot.\n\n\nCode\n# Define a function to plot contours of a bivariate normal distribution\ndef plot_multivar_norm(ax, muX, muY, sigmaX, sigmaY, x, y, labels=False):\n    # Construct the covariance matrix using the specified correlation rho\n    Sigma = np.array(\n        [[sigmaX**2, rho * sigmaX * sigmaY], [rho * sigmaX * sigmaY, sigmaY**2]]\n    )\n    Mu = np.array([muX, muY])  # Mean vector\n    U = multivariate_normal(mean=Mu, cov=Sigma)  # Multivariate normal object\n    grid = np.dstack((x, y))  # Create a grid for evaluation\n    z = U.pdf(grid)  # Evaluate the PDF on the grid\n    contour = ax.contour(x, y, z, colors=yellow, alpha=0.3)  # Plot contours\n    if labels:\n        ax.clabel(contour, inline=True, fontsize=8)  # Optionally label contours\n\n\n# Define a function to plot the conditional density f(y|x) for a given x_obs\ndef plot_conditional(\n    ax, muX, muY, sigmaX, sigmaY, rho, y_mesh, x_obs, magnification_factor=1\n):\n    # Compute conditional mean and standard deviation for Y|X=x_obs\n    mu = muY + (x_obs - muX) * rho * sigmaY / sigmaX\n    sigma = sigmaY * np.sqrt(1 - rho**2)\n    # Compute and scale the conditional normal density\n    x = magnification_factor * norm(loc=mu, scale=sigma).pdf(y_mesh)\n    # Plot the conditional density horizontally, shifted to align with x_obs\n    ax.plot(-x + x_obs, y_mesh, color=blue)\n    ax.fill_betweenx(y_mesh, -x + x_obs, x_obs, color=blue, alpha=0.4)\n\n\n# Set parameters for the bivariate normal distribution\nmuX = 0\nmuY = 0\nsigmaX = 1\nsigmaY = 2\nrhos = [0.5, 0.85]  # Correlation values to illustrate\nx_obs = [-1, 0, 1]  # Observed x values for conditional plots\nx, y = np.mgrid[-2.1:2.1:0.01, -5:5:0.01]  # Grid for contour plot\ny_mesh = np.linspace(-5, 5, num=250)  # Grid for conditional densities\n\n# Create a figure with three subplots: one for the marginal, two for different correlations\nfig, axes = plt.subplots(\n    ncols=3, figsize=(8, 4), sharey=True, gridspec_kw={\"width_ratios\": [1, 4, 4]}\n)\n\n# Plot the marginal density of Y on the first subplot (as a horizontal density)\nmagnification_factor = 2.5\nx_marginal = magnification_factor * norm(scale=sigmaY).pdf(y_mesh)\naxes[0].plot(-x_marginal, y_mesh, color=blue)\naxes[0].set_xlim(-1, 0)\naxes[0].fill_betweenx(y_mesh, -x_marginal, 0, color=blue, alpha=0.4)\naxes[0].yaxis.tick_right()\naxes[0].spines[\"left\"].set_visible(False)\naxes[0].spines[\"right\"].set_visible(True)\naxes[0].spines[\"bottom\"].set_visible(False)\naxes[0].set_xticks([])\n\n# For each correlation value, plot the joint contours and conditional densities\nfor rho, ax in zip(rhos, axes[1:]):\n    plot_multivar_norm(ax, muX, muY, sigmaX, sigmaY, x, y)\n    for x_ob in x_obs:\n        plot_conditional(\n            ax,\n            muX,\n            muY,\n            sigmaX,\n            sigmaY,\n            rho,\n            y_mesh,\n            x_obs=x_ob,\n            magnification_factor=3,\n        )\n    # Compute and display the mutual information for this correlation\n    info = -(1 / 2) * np.log(1 - rho**2)\n    ax.set_title(rf\"$\\rho ={rho}$, $I(X,Y)= {info:0.3f}$\")\n    ax.set_xlabel(r\"$x$\")\n    ax.set_xlim(-2.2, 2.2)\n    ax.set_xticks(range(-2, 3))\n\n# Label the y-axis on the first subplot\naxes[0].set_ylabel(r\"$y$\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nCompared to the marginal distribution of \\(Y\\), the conditional distributions become increasingly concentrated as \\(\\rho\\) increases. This stronger concentration reflects the reduced uncertainty in \\(Y\\) when \\(X\\) is observed. This example illustrates the intuition behind mutual information: greater correlation implies stronger dependence, smaller conditional entropy, and thus higher mutual information."
  },
  {
    "objectID": "posts/gmm-1/index.html",
    "href": "posts/gmm-1/index.html",
    "title": "Gaussian mixture models I: a first look",
    "section": "",
    "text": "A mixture of gaussians represents one of the most elegant and practically useful concepts in probability theory and machine learning. At its core, this is a probabilistic model that assumes observed data arises from a combination of several underlying normal distributions, each contributing to the overall distribution with different weights and parameters. Rather than forcing all data points to conform to a single bell curve, a gaussian mixture allows for multiple clusters, each governed by its own mean, variance, and relative importance in the mixture. This creates a framework for modeling complex, multi-modal distributions that frequently appear in real-world scenarios. Consider, for example, the heights of adults in a population that includes both men and women, or the distribution of pixel intensities in an image containing multiple distinct objects. A single gaussian would poorly capture the true underlying structure, while a mixture model can naturally accommodate the multiple peaks and varying spreads that characterize such data. The beauty of this approach lies not only in its flexibility but also in its mathematical tractability, making it both theoretically sound and computationally feasible for a wide range of applications.\nFor example, suppose we were presented with the following data distribution, displayed here as a histogram:\n\n\n\n\n\n\n\n\n\nThree clusters are immediately evident: the first with a peak around \\(x=10\\), the second around \\(x=15\\), and the third near \\(x=21\\). The presence of three clusters with well-defined peaks suggests that the data might be modeled well by a mixture of three gaussians.\nIndeed, this synthetic dataset contains 1,000 observations sampled from a three-component mixture of gaussians, also called a gaussian mixture model or GMM. In this introductory post, I’ll explain the mathematical and graphical structure of the GMM that generated this data. Since I fixed the GMM parameters before sampling, we know the true underlying model. In a follow-up post, I’ll tackle the inverse problem: given only the dataset, how can we estimate the parameters and recover the original GMM?"
  },
  {
    "objectID": "posts/gmm-1/index.html#introduction",
    "href": "posts/gmm-1/index.html#introduction",
    "title": "Gaussian mixture models I: a first look",
    "section": "",
    "text": "A mixture of gaussians represents one of the most elegant and practically useful concepts in probability theory and machine learning. At its core, this is a probabilistic model that assumes observed data arises from a combination of several underlying normal distributions, each contributing to the overall distribution with different weights and parameters. Rather than forcing all data points to conform to a single bell curve, a gaussian mixture allows for multiple clusters, each governed by its own mean, variance, and relative importance in the mixture. This creates a framework for modeling complex, multi-modal distributions that frequently appear in real-world scenarios. Consider, for example, the heights of adults in a population that includes both men and women, or the distribution of pixel intensities in an image containing multiple distinct objects. A single gaussian would poorly capture the true underlying structure, while a mixture model can naturally accommodate the multiple peaks and varying spreads that characterize such data. The beauty of this approach lies not only in its flexibility but also in its mathematical tractability, making it both theoretically sound and computationally feasible for a wide range of applications.\nFor example, suppose we were presented with the following data distribution, displayed here as a histogram:\n\n\n\n\n\n\n\n\n\nThree clusters are immediately evident: the first with a peak around \\(x=10\\), the second around \\(x=15\\), and the third near \\(x=21\\). The presence of three clusters with well-defined peaks suggests that the data might be modeled well by a mixture of three gaussians.\nIndeed, this synthetic dataset contains 1,000 observations sampled from a three-component mixture of gaussians, also called a gaussian mixture model or GMM. In this introductory post, I’ll explain the mathematical and graphical structure of the GMM that generated this data. Since I fixed the GMM parameters before sampling, we know the true underlying model. In a follow-up post, I’ll tackle the inverse problem: given only the dataset, how can we estimate the parameters and recover the original GMM?"
  },
  {
    "objectID": "posts/gmm-1/index.html#conditional-pdfs-and-graphical-structures",
    "href": "posts/gmm-1/index.html#conditional-pdfs-and-graphical-structures",
    "title": "Gaussian mixture models I: a first look",
    "section": "Conditional PDFs and graphical structures",
    "text": "Conditional PDFs and graphical structures\nAs mentioned above, a GMM combines several individual gaussians, each called a component of the mixture. Generating a sample \\(x\\) from a GMM involves two steps:\n\nSelect a component from which to generate \\(x\\).\nSample \\(x\\) from the chosen component gaussian.\n\nThe key insight is that components need not be selected with equal probability. Each component has an associated weight that determines its selection probability in step 1.\nTo formalize the selection process, we introduce the categorical distribution. Suppose given non-negative real numbers \\(\\phi_1,\\phi_2,\\ldots,\\phi_m\\) that sum to \\(1\\):\n\\[\n\\phi_1 + \\phi_2 + \\cdots + \\phi_m =1.\n\\]\nWe say that a discrete random variable \\(Y\\) has a categorical distribution, written\n\\[\nY \\sim \\mathcal{C}at(\\phi_1,\\phi_2,\\ldots,\\phi_m),\n\\tag{1}\\]\nif its probability mass function has the form\n\\[\np(y) = \\begin{cases}\n\\phi_y & : y=1,2,\\ldots,m, \\\\\n0 & : \\text{otherwise}.\n\\end{cases}\n\\]\nWe can now describe GMM sampling more precisely. For a GMM with \\(m\\) components where the \\(i\\)-th component has weight \\(\\phi_i\\), and \\(Y\\) a categorical random variable as in Equation 1, the sampling scheme above becomes:\n\nSample \\(y\\) from the categorical distribution \\(Y\\).\nGiven \\(y\\), sample \\(x\\) from the \\(y\\)-th component gaussian.\n\nThis natural progression from component selection to data generation is often called forward sampling, for obvious reasons.\nWe can visualize this sampling process with a simple graphical representation:\n\n\n\n\n\nHere, \\(Y\\) represents the categorical random variable that encodes component weights, while \\(X\\) represents the random variable from which we sample our observation \\(x\\). The arrow captures the “forward” direction of the sampling process: first select a component, then generate data from it. This diagram illustrates the GMM as a simple example of a probabilistic graphical model (or PGM)—a topic I’ll explore in depth in future posts.\nThe mathematical relationship between these variables is straightforward. Given that component \\(y\\) has been selected, the conditional distribution of \\(X\\) is gaussian:\n\\[\n(X \\mid Y=y) \\sim \\mathcal{N}(\\mu_y,\\sigma_y^2).\n\\]\nThis conditional distribution corresponds exactly to the \\(y\\)-th component of our GMM. Notice that both the mean \\(\\mu_y\\)​ and standard deviation \\(\\sigma_y\\) are component-specific, allowing each gaussian in the mixture to have its own location and spread.\nA GMM thus has two different types of parameters:\n\nThe component weights \\(\\phi_1,\\phi_2,\\ldots,\\phi_m\\).\nFor each \\(y=1,2,\\ldots,m\\), the guassian parameters \\(\\mu_y\\) and \\(\\sigma_y\\).\n\nAs I mentioned in the introduction, in this post we assume that these parameters are fixed and known. Later, we will learn how to estimate them from data."
  },
  {
    "objectID": "posts/gmm-1/index.html#marginal-pdfs",
    "href": "posts/gmm-1/index.html#marginal-pdfs",
    "title": "Gaussian mixture models I: a first look",
    "section": "Marginal PDFs",
    "text": "Marginal PDFs\nThe marginal distribution of \\(X\\) follows directly from the law of total probability: \\[\nf(x) = \\sum_{y=1}^m p(y)f(x|y)  = \\sum_{y=1}^m \\phi_y f(x|y),\n\\tag{2}\\]\nwhere the conditional densities are normal:\n\\[\nf(x|y) = \\frac{1}{\\sigma_y\\sqrt{2\\pi}} \\exp \\left[ - \\frac{1}{2} \\left( \\frac{x-\\mu_y}{\\sigma_y}\\right)^2\\right].\n\\]\nThus, the marginal density \\(f(x)\\) is a convex linear combination of normal densities.\nNow let’s examine the specific \\(3\\)-component GMM that generated our dataset. The component parameters are:\n\\[\n(\\mu_1,\\sigma_1) = (10, 1), \\quad (\\mu_2,\\sigma_2) = (15, 2), \\quad (\\mu_3,\\sigma_3) = (21, 0.5),\n\\]\nwith weights:\n\\[\n(\\phi_1,\\phi_2,\\phi_3) = (0.2, 0.7, 0.1).\n\\]\nNotice that the middle component (centered at 15) dominates with 70% weight, while the outer components contribute 20% and 10% respectively.\nLet’s implement and visualize the component gaussians and the marginal PDF in Python. First, let’s load the parameters:\n\nnorm_params = [\n  {\"loc\": 10, \"scale\": 1},\n  {\"loc\": 15, \"scale\": 2},\n  {\"loc\": 21, \"scale\": 0.5}\n]\nweights = [0.2, 0.7, 0.1]\n\nNow, we plot the individual components, each scaled by its weight:\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\nmesh = np.linspace(7, 23, num=200)\n\nfor y, (param, weight) in enumerate(zip(norm_params, weights)):\n  X = norm(**param)\n  plt.plot(mesh, weight * X.pdf(mesh), color=colors[y], label=f\"component {y+1}\")\n\nplt.xlabel(\"x\")\nplt.ylabel(\"density\")\nplt.title(\"gaussian components\")\nplt.legend()\nfig = plt.gcf()  # Get current figure\nfig.set_size_inches(6, 4)\nplt.tight_layout()\nplt.show()\nplt.close()\n\n\n\n\n\n\n\n\nThe marginal PDF implementation follows Equation 2 directly:\n\ndef marginal_pdf(x):  \n  return sum([weight * norm(**param).pdf(x) for weight, param in zip(weights, norm_params)])\n\nFinally, we plot the theoretical marginal PDF against the empirical histogram:\n\nimport seaborn as sns\n\ndata = np.load(\"../../data/gmm-data.npy\")\n\nsns.histplot(data=data, color=yellow, alpha=0.25, ec=grey, zorder=2, stat=\"density\", label=\"data\")\nplt.plot(mesh, marginal_pdf(mesh), color=blue, label=\"marginal PDF\")\nplt.xlabel(\"x\")\nplt.ylabel(\"density\")\nplt.legend()\nfig = plt.gcf()  # Get current figure\nfig.set_size_inches(6, 4)\nplt.tight_layout()\nplt.show()\nplt.close()\n\n\n\n\n\n\n\n\nThe close agreement between our theoretical marginal PDF and the empirical histogram confirms that our synthetic dataset faithfully represents the underlying GMM. Notice how the theoretical curve captures all three modes: the subtle left peak around \\(x=10\\), the dominant central peak near \\(x=15\\), and the sharp right peak at \\(x=21\\). The varying heights and widths of these peaks directly reflect the component weights and standard deviations we specified."
  },
  {
    "objectID": "posts/gmm-1/index.html#sampling",
    "href": "posts/gmm-1/index.html#sampling",
    "title": "Gaussian mixture models I: a first look",
    "section": "Sampling",
    "text": "Sampling\nHaving established the theoretical foundation and visualized the marginal PDF, let’s now examine the process behind generating our synthetic dataset.\nBut this is easy. We first sample 1,000 values of \\(y\\) from the categorical random variable\n\\[\nY \\sim \\mathcal{C}at(0.2, 0.7, 0.1),\n\\]\nand then for each \\(y\\) we sample from the gaussian \\(X|Y=y\\). We check that our new generated sample coincides with the original dataset:\n\nnp.random.seed(42) # Needed to replicate the original dataset\n\nn_samples = 1000\ny_samples = np.random.choice([0, 1, 2], size=n_samples, p=weights)\nx_samples = np.array([norm(**norm_params[y]).rvs() for y in y_samples])\n\nprint(\"Are the datasets equal? \" + (\"Yes.\" if np.array_equal(data, x_samples) else \"No.\"))\n\nAre the datasets equal? Yes."
  },
  {
    "objectID": "posts/gmm-1/index.html#conclusion",
    "href": "posts/gmm-1/index.html#conclusion",
    "title": "Gaussian mixture models I: a first look",
    "section": "Conclusion",
    "text": "Conclusion\nIn this post we’ve built the GMM from the ground up, starting with its definition, exploring its conditional and marginal structure, and even sampling from it directly. But in practice, the real challenge is the inverse problem we mentioned earlier: we are usually given a dataset and want to fit a GMM by estimating its parameters. How do we tease apart the hidden components, estimate their weights, and recover the underlying mixture? That puzzle leads directly to one of the most beautiful iterative methods in statistics and machine learning: the expectation–maximization algorithm, which will be the focus of the next post in this series."
  },
  {
    "objectID": "teaching/calculus-ii-fa-25.html",
    "href": "teaching/calculus-ii-fa-25.html",
    "title": "mat220 calculus II, fall 2025",
    "section": "",
    "text": "instructor:\n\n\njohn myers\n\n\n\n\noffice + office hours:\n\n\nmarano 175, 12-12:30 MWF\n\n\n\n\nhomework:\n\n\nlink\n\n\n\n\nsyllabus:\n\n\nlink\n\n\n\n\n\n\n\n\n\n\n\n\nweek\ndate\ntopics\ninfo + due dates\n\n\n\n\n8\n10.17 fri\n\n\n\n\n\n10.16 thu\nexam 1 on sections 5.1-7.4\nsection 7.4 hw due @ 9:30am\n\n\n\n10.15 wed\n\n\n\n\n\n10.13 mon\n\n\n\n\n7\n10.10 fri\nno class - fall break\n\n\n\n\n10.09 thu\nno class - fall break\n\n\n\n\n10.08 wed\n7.4 partial fractions, part 1  \nsection 7.3, part 2, hw due @ 12:30pm\n\n\n\n10.06 mon\nsec 800: class cancelled  sec 810: 7.3 trigonometric substitution, part 2  \nsection 7.3, part 1, hw due @ 12:30pm\n\n\n6\n10.03 fri\nsec 800: 7.3 trigonometric substitution, part 2    sec 810: class cancelled\nquiz 6 on section 7.1\n\n\n\n10.04 thu\n7.3 trigonometric substitution, part 1    7.3 trigonometric substitution, part 2  \n\n\n\n\n10.01 wed\n7.3 trigonometric substitution, part 1  \nsection 7.1 hw due @ 12:30pm\n\n\n\n09.29 mon\n7.1 integration by parts  \n\n\n\n5\n09.26 fri\n7.1 integration by parts  \nquiz 5 on sections 5.4 and 5.5\n\n\n\n09.25 thu\ngroup exploration 5\n\n\n\n\n09.24 wed\n7.1 integration by parts  \nsection 5.5 hw due @ 12:30pm\n\n\n\n09.22 mon\n5.5 average value of a function  \nsection 5.4 hw due @ 12:30pm\n\n\n4\n09.19 fri\n5.4 work  \nsection 5.3 hw due @ 12:30pmquiz 4 on section 5.3\n\n\n\n09.18 thu\ngroup exploration 4\n\n\n\n\n09.17 wed\n5.4 work  \n\n\n\n\n09.15 mon\n5.3 volumes by cylindrical shells  \nsection 5.2 hw due @ 12:30pm\n\n\n3\n09.12 fri\n5.2 volumes, part 2  \nquiz 3 on section 5.1\n\n\n\n09.11 thu\ngroup exploration 3\n\n\n\n\n09.10 wed\n5.2 volumes, part 1  5.2 volumes, part 2  \n\n\n\n\n09.08 mon\n5.2 volumes, part 1  \nsection 5.1 hw due @ 12:30pm\n\n\n2\n09.05 fri\n5.1 areas between curves  \n\n\n\n\n09.04 thu\ngroup exploration 2\ncalculus I review homework due @ 9:30am\n\n\n\n09.03 wed\ncalculus I review, part 2  \n\n\n\n1\n08.29 fri\nno class\n\n\n\n\n08.28 thu\nno class\n\n\n\n\n08.27 wed\ncalculus I review, part 1  \n\n\n\n\n08.25 mon\ncalculus I review, part 1"
  },
  {
    "objectID": "scripts/lin-reg-1.html",
    "href": "scripts/lin-reg-1.html",
    "title": "john myers, ph.d.",
    "section": "",
    "text": "from scipy.stats import norm, multivariate_normal, entropy\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\nnp.random.seed(42)\nplt.style.use(\"../aux-files/custom-theme.mplstyle\")\nyellow = \"#FFC300\"\nblue = \"#3399FF\"\npink = \"#FF3399\"\ngrey = \"#121212\"\nwhite = \"#E5E5E5\"\ncolors = [yellow, blue, pink]\n\ncmap_colors = [grey, yellow]\ncustom_cmap = LinearSegmentedColormap.from_list(\"my_cmap\", cmap_colors)\n\n\nn = 6\njoint = np.random.rand(n ** 2)\njoint = joint / joint.sum()\njoint = joint.reshape(n, n)\n\nax = sns.heatmap(joint.T, annot=True, fmt=\".3f\", cmap=custom_cmap, linewidth=8, linecolor=grey)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n\nax.invert_yaxis()\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, axes = plt.subplots(nrows=2, ncols=3, sharey=True, sharex=True)\naxes = axes.flatten()\nconditionals = []\n\nfor x, ax in enumerate(axes):\n  conditional = joint[x, :] / joint[x, :].sum()\n  conditionals.append(conditional)\n  ax.bar(range(n), conditional, width=0.4, zorder=2)\n  ax.set_xticks(range(n))  \n  ax.set_xticklabels(range(n))\n  ax.set_title(rf\"$x={x}$\")\n  \nfig.supxlabel(r\"$y$\")\nfig.supylabel(\"probability\")\nfig.suptitle(r\"conditional distributions $f(y\\mid x)$\")\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nX = joint.sum(axis=1)\nY = joint.sum(axis=0)\n\nfig, axes = plt.subplots(ncols=2, sharey=True, sharex=True, figsize=(7, 3))\n\naxes[0].bar(range(n), X, width=0.4)\naxes[0].set_xlabel(r\"$x$\")\naxes[0].set_title(r\"marginal distribution $f(x)$\")\n\naxes[1].bar(range(n), Y, width=0.4)\naxes[1].set_xlabel(r\"$y$\")\naxes[1].set_title(r\"marginal distribution $f(y)$\")\n\nfig.supylabel(\"probability\")\nplt.tight_layout()\nplt.subplots_adjust(wspace=0.4)\nplt.show()\n\n\n\n\n\n\n\n\n\ninfo = entropy(Y) - sum([entropy(conditional) * X[x] for x, conditional in enumerate(conditionals)])\nprint(f\"The mutual information between X and Y is {info:.4f}.\")\n\nThe mutual information between $X$ and $Y$ is 0.2032.\n\n\n\ndef plot_multivar(ax, muX, muY, sigmaX, sigmaY, x, y, labels=False):\n  Sigma = np.array([[sigmaX ** 2, rho * sigmaX * sigmaY], [rho * sigmaX * sigmaY, sigmaY ** 2]])\n  Mu = np.array([muX, muY])\n  U = multivariate_normal(mean=Mu, cov=Sigma)\n  grid = np.dstack((x, y))\n  z = U.pdf(grid)\n  contour = ax.contour(x, y, z, colors=yellow, alpha=0.5)\n  if labels:\n    ax.clabel(contour, inline=True, fontsize=8)\n  \ndef plot_conditional(ax, muX, muY, sigmaX, sigmaY, rho, y, x_obs):\n  mu = muY + (x_obs - muX) * rho * sigmaY / sigmaX\n  sigma = sigmaY * np.sqrt(1 - rho ** 2)\n  x = norm(loc=mu, scale=sigma).pdf(y)\n  ax.plot(-x + x_obs, y, color=blue)\n  ax.fill_betweenx(y, -x + x_obs, x_obs, color=blue, alpha=0.4)\n\ndef plot_combined(ax, muX, muY, sigmaX, sigmaY, rho, x, y, x_obs, labels=False):\n  plot_multivar(ax, muX, muY, sigmaX, sigmaY, x, y, labels)\n  y = np.linspace(np.min(y), np.max(y), num=250)\n  plot_conditional(ax, muX, muY, sigmaX, sigmaY, rho, y, x_obs[0])\n  plot_conditional(ax, muX, muY, sigmaX, sigmaY, rho, y, x_obs[1])\n  plot_conditional(ax, muX, muY, sigmaX, sigmaY, rho, y, x_obs[2])\n  ax.set_title(rf\"$\\rho ={rho}$\")\n  ax.set_xlabel(r\"$x$\")\n  ax.set_ylabel(r\"$y$\")\n  plt.tight_layout()\n  plt.show()\n\n_, ax = plt.subplots()\nx, y = np.mgrid[-1:3:0.01, -4:6:0.01]\n\nmuX = 1\nmuY = 1\nsigmaX = 1\nsigmaY = 2\nrho = 0.15\n\nplot_combined(ax, muX, muY, sigmaX, sigmaY, rho, x, y, x_obs=[0, 1, 2], labels=False)\n\n\n\n\n\n\n\n\n\n_, ax = plt.subplots()\nrho = 0.50\nplot_combined(ax, muX, muY, sigmaX, sigmaY, rho, x, y, x_obs=[0, 1, 2], labels=False)\n\n\n\n\n\n\n\n\n\n_, ax = plt.subplots()\nrho = 0.85\nplot_combined(ax, muX, muY, sigmaX, sigmaY, rho, x, y, x_obs=[0, 1, 2], labels=False)"
  }
]